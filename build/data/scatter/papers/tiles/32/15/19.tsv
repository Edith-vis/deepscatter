id	title	keywords	abstract	entities	authors	year	journal	doi	fos	area	x	y	ix
26a75cfa96c795a66e6ccd8360b0da970890db68	control synthesis based on reachability graph with minimal cuts: application to a flexible manufacturing system	supervisory control;reachability analysis control system synthesis flexible manufacturing systems linear systems petri nets;discrete event system;france control synthesis reachability graph minimal cut concept flexible manufacturing system petri net controller theory of regions control specification generalized mutual exclusion constraints gmec linear system fms enim national school of engineering of metz;minimal cuts;theory of regions;petri nets;minimal cuts discrete event system petri nets theory of regions supervisory control	This work presents a new method for the synthesis of Petri net controller using the theory of regions. Control specifications are expressed as the conjunction of generalized mutual exclusion constraints (GMEC). The great advantage of the proposed method is to reduce the resolution difficulty of the theory of regions by introducing a concept of minimal cut in the reachability graph with minimal number of nodes. This new concept leads to minimize the total number of equations in the linear system of the theory of regions to synthesize the Petri net controller. To illustrate the present approach, an application is implemented on the Flexible Manufacturing System (FMS) at the ENIM (National School of Engineering of Metz), in FRANCE.	linear system;max-flow min-cut theorem;mutual exclusion;petri net;reachability	Sadok Rezig;Zied Achour;Nidhal Rezg	2014	Proceedings of the 2014 IEEE Emerging Technology and Factory Automation (ETFA)	10.1109/ETFA.2014.7005299	control engineering;stochastic petri net;computer science;distributed computing;supervisory control;petri net	Robotics	-6.4343382769359785	28.600627627382412	155260
9a7186b47e6b791a953e6a7557c4d684bcbf08bd	scalable diagnosability checking of event-driven systems	keywords computational resources;counter examples;diagnosability;conference paper;event driven system;artificial intelligence;algorithms;diagnosability analysis;diagnostic reasoning	Diagnosability of systems is an essential property that determines how accurate any diagnostic reasoning can be on a system given any sequence of observations. Generally, in the literature of dynamic event-driven systems, diagnosability analysis is performed by algorithms that consider a system as a whole and their response is either a positive answer or a counter example. In this paper, we present an original framework for diagnosability checking. The diagnosability problem is solved in a distributed way in order to take into account the distributed nature of realistic problems. As opposed to all other approaches, our algorithm also provides an exhaustive and synthetic view of the reasons why the system is not diagnosable. Finally, the presented algorithm is scalable in practice: it provides an approximate and useful solution if the computational resources are not sufficient.	approximation algorithm;computation;computational resource;essence;event-driven architecture;event-driven finite-state machine;event-driven programming;scalability;synthetic intelligence;universal quantification;web service	Anika Schumann;Yannick Pencolé	2007			computer science;artificial intelligence;counterexample;theoretical computer science;distributed computing;algorithm	AI	-8.725095340183977	27.781926632308835	155361
41772f9a374378dff2f0005be145959ca18f4460	some approximations in model checking and testing		Model checking and testing are two areas with a similar goal: to verify that a system satisfies a property. They start with different hypothesis on the systems and develop many techniques with different notions of approximation, when an exact verification may be computationally too hard. We present some notions of approximation with their logic and statistics backgrounds, which yield several techniques for model checking and testing: Bounded Model Checking, Approximate Model Checking, Approximate Black-Box Checking, Approximate Model-based Testing and Approximate Probabilistic Model Checking. All these methods guarantee some quality and efficiency of the verification.	approximation;model checking;model-based testing;software testing;statistical model	Marie-Claude Gaudel;Richard Lassaigne;Frédéric Magniez;Michel de Rougemont	2013	CoRR		model checking;discrete mathematics;theoretical computer science;mathematics;abstraction model checking;symbolic trajectory evaluation;algorithm	Logic	-11.39511750368591	27.938018173691606	156995
884d3e11d4ad250c571f1b30c3c562046e55816b	test sequencing in modular systems	graph search;heuristic programming;automatic testing;failure analysis;system testing costs fault diagnosis sequential analysis fault detection entropy systems engineering and theory dictionaries performance evaluation decision trees;information theoretic heuristic evaluation functions system availability faulty module location modular systems diagnosis field maintenance optimal test sequences test sequencing and or graph search procedure;scheduling;modular system;search problems automatic testing failure analysis fault location heuristic programming scheduling;heuristic evaluation;search problems;information theoretic;fault diagnosis;fault location	Motivated by the need to increase the availability of systems, the primary focus of diagnosis in field maintenance is to locate the faulty modules rather than locating faults in the individual modules. In this paper we consider the problem of constructing optimal test sequences to diagnose faults in such modular systems. We solve this generalized test sequencing problem by an AND/OR graph search procedure, wherein the information-theoretic heuristic evaluation functions of [1.5] are modified to account for modular fault diagnosis. The effectiveness of the algorithm is demonstrated on various test cases.	algorithm;graph traversal;heuristic evaluation;information theory;test case	Krishna R. Pattipati;Mahesh Dontamsetty	1989		10.1109/ICSMC.1989.71497	failure analysis;computer science;theoretical computer science;machine learning;incremental heuristic search;heuristic evaluation;scheduling	AI	-5.026728555529589	30.95898966790255	157842
790d6de336c482d1548d5ea9c2d9dd9a3719e5b1	verification of mobile ad hoc networks: an algebraic approach	algebraic approach;labeled transition system;equational reasoning;operational semantics;computer network;article letter to editor;model checking;mobile ad hoc network;routing protocol	We introduced Computed Network Process Theory to reason about protocols for mobile ad hoc networks (MANETs). Here we explore the applicability of our framework in two regards: model checking and equational reasoning. The operational semantics of our framework is based on constrained labeled transition systems (CLTSs), in which each transition label is parameterized with the set of topologies for which this transition is enabled. We illustrate how through model checking on CLTSs one can analyze mobility scenarios of MANET protocols. Furthermore, we show how by equational theory one can reason about MANETs consisting of a finite but unbounded set of nodes, in which all nodes deploy the same protocol. Model checking and equational reasoning together provide us with an appropriate framework to prove the correctness of MANETs. We demonstrate the applicability of our framework by a case study on a simple routing protocol. © 2011 Elsevier B.V. All rights reserved.	automated theorem proving;bisimulation;blocking (computing);classical nucleation theory;correctness (computer science);hol (proof assistant);hoc (programming language);linear algebra;lossy compression;model checking;natural proof;non-blocking algorithm;operational semantics;routing;spin;semiconductor industry;simulation	Fatemeh Ghassemi;Wan Fokkink;Ali Movaghar-Rahimabadi	2011	Theor. Comput. Sci.	10.1016/j.tcs.2011.03.017	model checking;optimized link state routing protocol;mobile ad hoc network;computer science;theoretical computer science;distributed computing;routing protocol;operational semantics;algorithm	AI	-11.731791362473327	30.054460500438342	159287
dfe827ed41af32935ad1d7e28a209daaad94e91d	positive fail-safe realization of synchronous sequential machines	sequential machines;sequential machines covering set destination set fail safe k out of n code positive fail safe assignment positive realization realization free;covering set;k out of n code;positive fail safe assignment;destination set;realization free;fail safe;positive realization	The correspondence deals with the fail-safe realization of synchronous sequential machines under the assumption that the next-state functions are in any positive form. This leads to new classes of assignments called positive fail-safe assignment's (PFSA) The feasibility conditions of such assignments are given and systematic procedures are presented for deriving them using k-out-of-n codes.	code;fail-safe	Constantin Halatsis;Nikolaos Gaitanis	1979	IEEE Transactions on Computers	10.1109/TC.1979.1675309	discrete mathematics;real-time computing;mathematics;fail-safe;algorithm	Embedded	-5.704512355949363	26.223344352148835	159414
a6d21b4442146e025fa5f2f3f2d2be334f799ef1	“polynomial time verification of decentralized diagnosability of discrete event systems” versus “decentralized failure diagnosis of discrete event systems”: a critical appraisal	testing;polynomials;automata;complexity analysis discrete event systems fault diagnosis;computational complexity;fault diagnosis computational complexity discrete event systems;discrete event systems;nonprojection mask polynomial time verification decentralized diagnosability discrete event system decentralized failure diagnosis critical appraisal computational complexity analysis verification algorithm;algorithm design and analysis;automata algorithm design and analysis discrete event systems computational complexity testing polynomials	In [1], the authors claim that there is an oversight in [2], in the sense that the proposed verifier is, in general, nondeterministic and the computational complexity analysis is incorrect. The authors in [1] also claim that the complexity of the verification algorithm presented in [3] is reduced when considering the more restrictive setting of projection masks, in contrast to the more general non-projection masks case, and equals the complexity of the verification algorithm presented in [2]. In this note, we show that the computational complexity analysis of [2] is actually correct and that the complexity of the verification algorithm presented in [3] is not reduced without additional modification of the algorithm (not yet proposed in the literature) if projection masks are used, and, therefore, is not equal to the complexity of the algorithm presented in [2].	analysis of algorithms;centralized computing;computational complexity theory;liveness;nondeterministic algorithm;projection-slice theorem;state space;time complexity	Marcos Vicente Moreira;João Carlos Basilio;Felipe Gomes Cabral	2010	IEEE Transactions on Automatic Control	10.1109/TAC.2015.2427711	time complexity;algorithm design;discrete mathematics;complexity;average-case complexity;ph;theoretical computer science;structural complexity theory;discrete system;computational resource;worst-case complexity;mathematics;distributed computing;automaton;software testing;computational complexity theory;asymptotic computational complexity;descriptive complexity theory;polynomial	Logic	-8.156081553467768	27.739774846602547	162732
f03233349989d255171beee56fcd04a066702e09	analyzing unsatisfiability in bounded model checking using max-smt and dual slicing		Bounded model checking (BMC) with satisfiability modulo theories (SMT) is a powerful approach for generating test cases or finding bugs. However, it is generally difficult to determine an appropriate unrolling bound k in BMC. An SMT formula for BMC might be unsatisfiable because of the insufficiency of k. In this paper, we propose a novel approach for BMC using partial maximum satisfiability, in which the initial conditions of state variables are treated as soft constraints. State variables whose initial conditions are not satisfied in the solution of a maximum satisfiability solver can be regarded as bottlenecks in BMC. We can simultaneously estimate modified initial conditions for these bottleneck variables, with which the formula becomes satisfiable. Furthermore, we propose a method based on dual slicing to delineate the program path that is changed when we modify the initial conditions of the specified bottlenecks. The analysis results help us to estimate a suitable unrolling bound. We present experimental results using examples from the automotive industry to demonstrate the usefulness of the proposed method.	model checking	Takuro Kutsuna;Yoshinao Ishii	2016		10.1007/978-3-319-45943-1_5	state variable;mathematical optimization;model checking;satisfiability;test case;mathematics;bottleneck;satisfiability modulo theories;bounded function;solver	SE	-11.580899208948548	28.051844702223633	163232
86d71b3214676adeebc3d1b6899ea59abddc919f	distributed and structured analysis approaches to study large and complex systems	no determinismo;evaluation performance;matriz transicion;articulo sintesis;performance evaluation;explosion;article synthese;evaluacion prestacion;decision diagram;bibliografia;bibliography;analyse temporelle;sistema complejo;diagramme decision;analisis temporal;transition matrix;time analysis;non determinism;systeme complexe;state space method;non determinisme;complex system;methode espace etat;estructura datos;algorithme reparti;bibliographie;algoritmo repartido;explosions;structure donnee;logic analyzer;analyseur logique;analizador logico;review;distributed algorithm;data structure;structure analysis;metodo espacio estado;matrice transition	Both the logic and the stochastic analysis of discrete-state systems are hindered by the combinatorial growth of the state space underlying a high-level model. In this work, we consider two orthogonal approaches to cope with this “state-space explosion”. Distributed algorithms that make use of the processors and memory overall available on a network of N workstations can manage models with state spaces approximately N times larger than what is possible on a single workstation. A second approach, constituting a fundamental paradigm shift, is instead based on decision diagrams and related implicit data structures that efficiently encode the state space or the transition rate matrix of a model, provided that it has some structure to guide its decomposition; with these implicit methods, enormous sets can be managed efficiently, but the numerical solution of the stochastic model, if desired, is still a bottleneck, as it requires vectors of the size of the state space.	approximation;central processing unit;complex systems;cylinder-head-sector;data structure;decision problem;diagram;distributed algorithm;encode;generator matrix;globally asynchronous locally synchronous;high- and low-level;markov chain;markov model;mathematical model;model checking;numerical partial differential equations;programming paradigm;state space;stochastic matrix;stochastic process;structured analysis;von neumann architecture;workstation	Gianfranco Ciardo	2000		10.1007/3-540-44667-2_10	distributed algorithm;influence diagram;data structure;computer science;artificial intelligence;stochastic matrix;distributed computing;structural analysis;bibliography;programming language;algorithm;logic analyzer	Logic	-9.31275642817666	28.089865089704947	163451
18148c478c19b4aeca22c2082ab31bbd9be15f9d	diagnosis and repair for synthesis from signal temporal logic specifications	signal temporal logic;synthesis;diagnosis;hybrid systems;repair	We address the problem of diagnosing and repairing specifications for hybrid systems, formalized in signal temporal logic (STL). Our focus is on automatic synthesis of controllers from specifications using model predictive control. We build on recent approaches that reduce the controller synthesis problem to solving one or more mixed integer linear programs (MILPs), where infeasibility of an MILP usually indicates unrealizability of the controller synthesis problem. Given an infeasible STL synthesis problem, we present algorithms that provide feedback on the reasons for unrealizability, and suggestions for making it realizable. Our algorithms are sound and complete relative to the synthesis algorithm, i.e., they provide a diagnosis that makes the synthesis problem infeasible, and always terminate with a non-trivial specification that is feasible using the chosen synthesis method, when such a solution exists. We demonstrate the effectiveness of our approach on controller synthesis for various cyber-physical systems, including an autonomous driving application and an aircraft electric power system.	algorithm;automatic control;autonomous car;cyber-physical system;hybrid system;integer programming;linear programming;temporal logic;terminate (software)	Shromona Ghosh;Dorsa Sadigh;Pierluigi Nuzzo;Vasumathi Raman;Alexandre Donzé;Alberto L. Sangiovanni-Vincentelli;S. Shankar Sastry;Sanjit A. Seshia	2016		10.1145/2883817.2883847	control engineering;mathematical optimization;real-time computing;engineering;medical diagnosis;control theory;algorithm;hybrid system	Logic	-7.78713387980335	29.32116245990208	163781
cd41e6f4dd089ce7c3db5d7105bbd2024a85f4bc	structural characterization and qualitative properties of product form stochastic petri nets	queueing network;reachability;stochastic process;longitud hilera;temps polynomial;red petri;stochastic petri net;queue length;probabilistic approach;product;red cola espera;communication conference;stochastic petri nets;producto;reseau file attente;enfoque probabilista;approche probabiliste;asequibilidad;processus stochastique;polynomial time;atteignabilite;longueur file;produit;proceso estocastico;petri net;reseau petri;steady state;tiempo polinomial	The model ofSto chastic Petri nets (SPN) with a product form solution (Π-net) is a class ofnets for which there is an analytic expression of the steady state probabilities w.r.t. markings, as for product form queueing networks w.r.t. queue lengths. In this paper, we prove new important properties of this kind of nets. First we provide a polynomial time (w.r.t. the size ofthe net structure) algorithm to check whether a SPN is a Π-net. Then, we give a purely structural characterization of SPN for which a product form solution exists regardless the particular values ofprobabilistic parameters ofthe SPN. We call such nets /Π-nets. We also present untimed properties of Π-nets and /Π-nets such like liveness, reachability, deadlock freeness and characterization of reachable markings. The complexity of the reachability and the liveness problems is also addressed for Π-nets and /Π-nets. These results complement previous studies on these classes ofnets and improve the applicability of Product Form solutions.	stochastic petri net	Serge Haddad;Patrice Moreaux;Matteo Sereno;Manuel Silva Suárez	2001		10.1007/3-540-45740-2_11	stochastic process;combinatorics;discrete mathematics;real-time computing;stochastic petri net;computer science;algorithm;statistics	Logic	-8.528497109844459	25.46288001206364	163826
cff2ffe5a410e2b52419af3aa9a90afddfea3a70	timed reachability analysis method for efsm-based communication protocols and its experimental evaluation	verification;protocols;lower and upper bound;queueing theory;real time;parallel processing protocols broadcasting reachability analysis queueing theory;fifo queues timed reachability analysis method efsm based communication protocols experimental evaluation system states upper bounds lower bounds parallel execution efficiency verification tool broadcasting protocol experimental results state generation;communication protocol;experimental evaluation;broadcasting;reachability analysis protocols upper bound broadcasting informatics electronic mail real time systems communication channels;communication protocols;reachability analysis;parallel processing	We propose a timed reachability analysis method in order to generate system states of two classes of EFSM-based communication protocols; one class C1 consists of events such that the lower and upper bounds are all the same and the other class C2 consists of events such that they may be different. The proposed method enumerates only sequences of system states that are obtained through parallel execution of all possible events. Then, in order to evaluate the efficiency of the proposed method, we develop a verification tool based on the proposed method, and then apply the tool to a broadcasting protocol. The experimental results show that the total number of states generated by the proposed method is much less than that by the previous method.	reachability	Shin'ichi Nagano;Yoshinori Hatakeyama;Yoshiaki Kakuda;Tohru Kikuno	1996		10.1109/ICNP.1996.564914	communications protocol;parallel processing;real-time computing;computer science;theoretical computer science;operating system;distributed computing;computer network	Logic	-10.777104936505939	29.741181949803842	163888
1c0d93ed59334f32eb1bbf950ad6120036a0d333	automatic verification of liveness properties of randomized systems (extended abstract)	automatic verification;byzantine failures;quorum systems;fair scheduling;004 informatik;probabilistic system;satisfiability;model checking;fault tolerance;distributed systems	We consider concurrent probabilistic systems which distinguish between nondeterministic and probabilistic choice. Such systems typically arise as formal models of randomized distributed systems as considered by Segala & Lynch [28, 33, 35]. By resolving only the nondeterministic choices, these models can be decomposed into a collection of “computation trees”. The presence of nondeterminism means that certain liveness properties cannot be established unless fairness is assumed. We introduce a probabilistic branching time logicPBTLwhose formulas express properties such as “every request is eventually granted with probability at least p” and give an interpretation for PBTL on concurrent probabilistic systems, where the branching time quantifiers are taken to range over a certain kind of fair computation trees. We then present a model checking algorithm for verifying whether a concurrent probabilistic system satisfies a PBTL formula assuming fairness constraints, and also discuss how to modify the algorithm of Bianco & de Alfaro, which can be applied toPBTL , to cater for fairness.	computation tree;distributed computing;fairness measure;liveness;model checking;randomized algorithm;verification and validation	Christel Baier;Marta Z. Kwiatkowska	1997		10.1145/259380.259527	model checking;fault tolerance;real-time computing;computer science;theoretical computer science;distributed computing;byzantine fault tolerance;satisfiability	Logic	-9.142352423156671	25.838864865596946	164812
b3abc3b81d99e78806f2742965620ed9bbb52c46	on computation of state avoidance control for infinite state systems in assignment program framework	modelizacion;iterative method;sistema infinito;control systems discrete event systems supervisory control automatic control petri nets control system synthesis state space methods system recovery iterative algorithms control engineering education;systeme evenement discret;state space methods;supervisory control;sintesis control;red petri;sistema acontecimiento discreto;metodo iterativo;programming model;modelisation;control problem;discrete event system;state space method;methode espace etat;methode iterative;synthese commande;supervisory control assignment programs discrete event systems petri nets state avoidance;state space;borne inferieure;discrete event systems;assignment programs;reachability analysis discrete event systems multidimensional systems petri nets state space methods;petri nets;reachability analysis state avoidance control infinite state space systems supervisory control computations discrete event systems assignment program model petri nets finitely terminating algorithm maximally permissive supervision symbolic technique;petri net;modeling;supervision;systeme infini;state avoidance;reachability analysis;control synthesis;discrete event;multidimensional systems;lower bound;control strategy;reseau petri;metodo espacio estado;cota inferior;infinite system	"""We study supervisory control of discrete event systems with potentially infinite state-space using state variables for representation and specification. An assignment program model consisting of state variables and a finite set of conditional assignment statements is used for representing a discrete event system, and a predicate over state variables is used for representing a state avoidance control specification. The contribution of this paper is to show how to perform supervisory control computations symbolically. In the case of a Petri net (vector addition system) with the set of forbidden states being a right-closed set, we present a finitely terminating algorithm for maximally permissive supervision. Discrete-event systems are systems with discrete states that evolve in response to discrete events. The state space of such systems can be finite or infinite. The latter case occurs when the state-variables can take infinitely many values such as integers. Certain states in a given system may be """"bad"""", such as a deadlocking state. Then, controllers must be designed to restrict the system behavior by dynamically disabling events occurring in the system so that system never reaches the bad states. Also, certain events can be uncontrollable and cannot be disabled. State-avoidance control of potentially infinite-state discrete-event systems is studied in this paper. A compact program-like modeling formalism has been adopted. Although the control problem for infinite-state systems is in general not solvable in an automated fashion owing to its undecidability established We develop a symbolic technique, that is iterative in nature and can be automated, for computing a control strategy. If the iteration terminates (there is no guarantee though), a controller is computed. We illustrate through several examples where the iterative computation does terminate. Finally, we show that for a certain class of infinite-state systems that can be modeled as Petri nets, the iterative computation is guaranteed to terminate whenever the state-avoidance set is lower-bounded (every state that """"dominates"""" a bad state is itself bad)."""	algorithm;automated theorem proving;computation;control theory;decision problem;item unique identification;iteration;newman's lemma;petri net;semantics (computer science);state space;symbolic computation;terminate (software);vector addition system	Ratnesh Kumar;Vijay K. Garg	2005	IEEE Transactions on Automation Science and Engineering	10.1109/TASE.2004.829432	control engineering;discrete mathematics;discrete event dynamic system;computer science;control theory;mathematics;petri net;algorithm;state variable	SE	-6.985904779213351	28.48845406664585	167240
0746cbb20a273de6e51ec274a0189249dfb10395	guided synthesis of control programs using uppaal	real time verification;program synthesis;scheduling;guided model checking;distributed systems	In this paperwe addressthe problemof schedulingand synthesizingdistributedcontrol programsfor a batch production plant. We usea timedautomatamodelof thebatch plant and theverificationtool UPPAAL to solvetheschedulingproblem. Theplant modelaimsat faithfully reflectingthe level of abstractionrequiredfor synthesizingcontrol programsfromgeneratedtimedtraces.Therefore it quickly becomestoo detailed andcomplicatedfor automaticsynthesis.To solvethis problemwepresenta general wayof addingguidanceto a model by augmentingit with additionalguidancevariablesanddecorating the transitionswith extra guards. Applyingthis techniquehavemadesynthesisof control programsfeasiblefor a plant producingas manyas 60 batches. In comparison,we couldonlyhandleplantsproducingtwobatcheswithoutusing guides. The synthesizedcontrol programshavebeenexecutedin a physicalplant. This proved useful in validating the plant modelandin findingsomemodelingerrors.	sizeof;uppaal	Thomas Hune;Kim G. Larsen;Paul Pettersson	2000			real-time computing;simulation;computer science;distributed computing;programming language;scheduling;algorithm	Embedded	-8.987987794213007	28.762233844175327	167483
1f68f11c7c0447354e2802bc599fc0b58e53c1cc	failure diagnosis of discrete-event systems with linear-time temporal logic specifications	linear time temporal logic;formal languages fault diagnosis discrete event systems temporal logic;verificacion modelo;logica temporal;systeme evenement discret;formal specification;algorithm complexity;complejidad algoritmo;temporal logic;temps lineaire;vivacidad;verification modele;formal languages;automaton;diagnosability;tiempo lineal;model checking failure diagnosis discrete event systems linear time temporal logic specifications;discrete event systems logic formal languages safety polynomials system testing system recovery sensor systems reliability engineering computer science;safety properties;specification language;vivacite;sistema acontecimiento discreto;specification formelle;especificacion formal;automata;discrete event system;complexite algorithme;model checking;diagnostic panne;fault diagnostic;automate;linear time;diagnostico pana;discrete event systems;liveness;lenguaje especificacion;langage specification;diagnostiquabilite;lenguaje formal;logique temporelle;formal language;fault diagnosis;langage formel	The paper studies failure diagnosis of discrete-event systems (DESs) with linear-time temporal logic (LTL) specifications. The LTL formulas are used for specifying failures in the system. The LTL-based specifications make the specification specifying process easier and more user-friendly than the formal language/automata-based specifications; and they can capture the failures representing the violation of both liveness and safety properties, whereas the prior formal language/automaton-based specifications can capture the failures representing the violation of only the safety properties (such as the occurrence of a faulty event or the arrival at a failed state). Prediagnosability and diagnosability of DESs in the temporal logic setting are defined. The problem of testing prediagnosability and diagnosability is reduced to the problem of model checking. An algorithm for the test of prediagnosability and diagnosability, and the synthesis of a diagnoser is obtained. The complexity of the algorithm is exponential in the length of each specification LTL formula, and polynomial in the number of system states and the number of specifications. The requirement of nonexistence of unobservable cycles in the system, which is needed for the diagnosis algorithms in prior methods to work, is relaxed. Finally, a simple example is given for illustration.	algorithm;automaton;ctl*;formal language;linear temporal logic;liveness;model checking;polynomial;time complexity;usability	Shengbing Jiang;Ratnesh Kumar	2004	IEEE Transactions on Automatic Control	10.1109/TAC.2004.829616	formal language;discrete mathematics;linear temporal logic;real-time computing;mathematics;automaton;algorithm	Logic	-10.00207852814351	26.720245125349905	167835
8ccd65cc291b9ff13715313377b024964cc0c0be	from supervisory control to nonblocking controllers for discrete event systems				Petra Malik	2003				Robotics	-5.728821267769745	29.325608938535968	168285
4fa1033ecad3779ba2c9a6dfb76faad57864e939	praobabilistic resource failure in real-time process algebra	systeme temps reel;distributed system;semantica operacional;systeme reparti;teoria sistema;operational semantics;real time processing;simultaneidad informatica;probability of failure;concurrency;semantique operationnelle;sistema repartido;algebra proceso;systems theory;theorie systeme;algebre processus;real time process algebra;real time system;sistema tiempo real;process algebra;simultaneite informatique	PACSR, a probabilistic extension of the real-time process algebra ACSR, is presented. The extension is built upon a novel treatment of the notion of a resource. In ACSR, resources are used to model contention in accessing physical devices. Here, resources are invested with the ability to fail and are associated with a probability of failure. The resulting formalism allows one to perform probabilistic analysis of real-time system speci cations in the presence of resource failures. A probabilistic variant of Hennessy-Milner logic with until is presented. The logic features an until operator which is parameterized by both a probabilistic constraint and a regular expression over observable actions. This style of parameterization allows the application of probabilistic constraints to complex execution fragments. A model-checking algorithm for the proposed logic is also given. Finally, PACSR and the logic are illustrated with a telecommunications example.	algorithm;hennessy–milner logic;model checking;observable;probabilistic analysis of algorithms;process calculus;real-time clock;real-time computing;real-time transcription;regular expression;semantics (computer science)	Anna Philippou;Rance Cleaveland;Insup Lee;Scott A. Smolka;Oleg Sokolsky	1998		10.1007/BFb0055637	process calculus;real-time operating system;probabilistic ctl;concurrency;computer science;artificial intelligence;probabilistic logic;programming language;probabilistic argumentation;operational semantics;probabilistic logic network;systems theory;algorithm	Embedded	-9.735427397043678	26.44203315896392	169613
54afe9a423393bd8c22079546522b81fc83f722f	real-time supervision for intelligent manufacturing supported by t-temporal petri net models	flexible manufacturing systems;real time;flexible manufacturing systems petri nets computer integrated manufacturing real time systems intelligent control discrete event systems;intelligent control;model uncertainty;discrete event systems;petri nets;local rescheduling procedures real time supervision intelligent manufacturing t temporal petri net models supervising heterarchy modeling uncertainties adaptivity resource break downs nondeterministic time;petri net;manufacturing system;computer integrated manufacturing;real time systems;virtual manufacturing size control control systems control system synthesis real time systems process control databases manufacturing systems robustness uncertainty	The paper presents the architecture and functioning of an intelligent supervisory module designed for building a supervising heterarchy for real-time manufacturing systems control. The supervisory module is conceived to have intrinsic properties such as robustness to a class of modeling uncertainties (i.e. duration of operations) and adaptivity to a class of resource break-downs. The robustness property is assured by using a modeling support capable of integrating nondeterministic time: T-temporal Petri nets (TTPN). The adaptivity is a consequence of specific local rescheduling procedures based on the modeling approach and of the structure of the control/supervision architecture. A case study illustrates the basic functioning of a supervision module.	petri net;real-time transcription	Simona Iuliana Caramihai;Ioan Dumitrache;Aurelian Mihai Stanescu	1998		10.1109/ICSMC.1998.725475	real-time computing;process development execution system;computer science;computer-integrated manufacturing;process architecture;petri net;intelligent control	Robotics	-5.725648339350932	28.48844211503361	170183
0ce7f63c9d62ebde08a015606f4723dd89c50be7	petri net based verification of distributed algorithms: an example	logica temporal;algorithm analysis;temporal logic;algorithme;algorithme reparti;network algorithm;algorithms;algoritmo repartido;analyse algorithme;petri nets;petri net;distributed algorithm;logique temporelle;analisis algoritmo;reseau petri	A technique to model and to verify distributed algorithms is suggested. This technique (based on Petri nets) reduces the modelling and analysis effort to a reasonable level. The paper outlines the technique using the example of a typical network algorithm, theecho algorithm.	dijkstra's algorithm;distributed algorithm;petri net	Ekkart Kindler;Wolfgang Reisig;Hagen Völzer;Rolf Walter	1997	Formal Aspects of Computing	10.1007/BF01211299	distributed algorithm;computer science;artificial intelligence;theoretical computer science;petri net;algorithm	SE	-9.512942721373067	26.785317055020254	171617
b4cf970a05e6c262b5724b3f28c5d83e865aa3f3	reduction and refinement strategies for probabilistic analysis	heuristic method;verification modele;decision markov;metodo heuristico;probabilistic approach;program verification;verificacion programa;numerical analysis;model checking;state space method;methode espace etat;probabilistic analysis;enfoque probabilista;approche probabiliste;state space;markov decision;profitability;methode heuristique;markov decision process;verification programme;reachability analysis;analyse atteignabilite;metodo espacio estado	We report on new strategies for model checking quantitative reachability properties of Markov decision processes by successive refinements. In our approach, properties are analyzed on abstractions rather than directly on the given model. Such abstractions are expected to be significantly smaller than the original model, and may safely refute or accept the required property. Otherwise, the abstraction is refined and the process repeated. As the numerical analysis involved in settling the validity of the property is more costly than the refinement process, the method profits from applying such numerical analysis on smaller state spaces. The method is significantly enhanced by a number of novel strategies: a strategy for reducing the size of the numerical problems to be analyzed by identification of so-called essential states, and heuristic strategies for guiding the refinement process.	probabilistic analysis of algorithms;refinement (computing)	Pedro R. D'Argenio;Bertrand Jeannet;Henrik Ejersbo Jensen;Kim G. Larsen	2002		10.1007/3-540-45605-8_5	markov decision process;model checking;combinatorics;discrete mathematics;probabilistic analysis of algorithms;numerical analysis;computer science;state space;artificial intelligence;mathematics;algorithm;profitability index	Logic	-11.814219686665812	27.988158667578922	171944
b15e0199f5a945e2b228471ba7328d93b92e217d	remarks on the difficulty of top-down supervisor synthesis	formal languages;supervisory control joints observability educational institutions law communities;set theory;top down design distributed control decomposable subset supervisory control;drntu engineering electrical and electronic engineering;conference paper;control system synthesis;set theory control system synthesis decidability distributed control formal languages;decidability status language based top down supervisor synthesis ramadge wonham supervisory control theory undecidability decomposable subset problem prefix closed version trace closed subset problem regular language control community;distributed control;decidability	This paper shows that language based top-down supervisor synthesis of Ramadge-Wonham supervisory control theory is in general not feasible. We show this as a direct consequence of the undecidability result of Decomposable Subset problem (and its prefix closed version), which in turn is a corollary of the undecidability result of Trace Closed Subset problem. Essentially, it is in general not possible to decide in finite amount of time whether there exists a string in a regular language such that all those strings indistinguishable from it are contained in the same language. We bring these results to the attention of control community and investigate the decidability status of some other related problems.	control theory;regular language;string operations;top-down and bottom-up design;undecidable problem	Liyong Lin;Rong Su;Alin Stefanescu	2012	2012 12th International Conference on Control Automation Robotics & Vision (ICARCV)	10.1109/ICARCV.2012.6485170	decidability;formal language;discrete mathematics;computer science;theoretical computer science;mathematics;algorithm;set theory	Robotics	-6.059667099923047	26.278424643675898	172322
e81a6ce3dbad9d6b1e2d674bbf9a5d9628cc9e0a	divide, abstract, and model-check	verification;data transmission;metodologia;decomposition;protocole transmission;telecommunication sans fil;sliding window protocol;fenetre coulissante;methodologie;protocolo transmision;model checking;telecomunicacion sin hilo;raisonnement deductif;transmission donnee;ventana deslizante;building abstraction;verificacion;descomposicion;methodology;reseau atm;atm network;independance donnee;transmision datos;sliding window;wireless telecommunication;transmission protocol	The applicability of model-checking is often restricted by the size of the considered system. To overcome this limitation, a number of techniques have been investigated. Prominent among these are data independence, abstraction, and compositionality. This paper presents a methodology based on deductive reasoning and model-checking which combines these techniques. As we show, the combination of abstraction and compositionality gives a signi cant added value to each of them in isolation. We substantiate the approach proving safety of a sliding window protocol of window size 16 using Spin and PVS.	atm turbo;automated theorem proving;decomposition (computer science);liveness;model checking;spin;window function	Karsten Stahl;Kai Baukus;Yassine Lakhnech;Martin Steffen	1999		10.1007/3-540-48234-2_5	sliding window protocol;real-time computing;telecommunications;computer science;algorithm	Logic	-10.012048918860648	27.40923480312684	172338
2bc00739e71b386a32206fe8c9a11e4e9e0ef16f	deciding probabilistic bisimilarity over infinite-state probabilistic systems	sistema infinito;metodo polinomial;temps polynomial;automata estado finito;maquina estado finito;simultaneidad informatica;probabilistic system;probabilistic approach;polynomial time algorithm;automate a pile;concurrency;polynomial method;enfoque probabilista;approche probabiliste;polynomial time;pushdown automata;decidibilidad;finite automaton;automate fini;push down automaton;decidabilite;methode polynomiale;machine etat fini;simultaneite informatique;systeme infini;finite state machine;automata a pila;decidability;infinite system;tiempo polinomial	We prove that probabilistic bisimilarity is decidable over probabilistic extensions of BPA and BPP processes. For normed subclasses of probabilistic BPA and BPP processes we obtain polynomial-time algorithms. Further, we show that probabilistic bisimilarity between probabilistic pushdown automata and finite-state systems is decidable in exponential time. If the number of control states in PDA is bounded by a fixed constant, then the algorithm needs only polynomial time.	algorithm;automata theory;bpp (complexity);bisimulation;exptime;oracle bpa suite;personal digital assistant;polynomial;probabilistic turing machine;probabilistic automaton;pushdown automaton;stack (abstract data type);time complexity	Tomás Brázdil;Antonín Kucera;Oldrich Strazovský	2004		10.1007/978-3-540-28644-8_13	decidability;time complexity;combinatorics;discrete mathematics;probabilistic analysis of algorithms;probabilistic ctl;concurrency;computer science;mathematics;finite-state machine;pushdown automaton;algorithm	Logic	-9.318322468274612	26.28749437057133	172566
131290cbd45522e87405da0639dfd930a386b6f0	a formal approach to robustness testing of network protocol with time constraints	databases;routing protocols;protocols;time sampling;network protocol;formal model;test sequences;testing;specification language;automata;time factors;test specification language;program testing;specification languages;test coverage;ospfv2 robustness testing network protocol time constraints timed npefsm model time sampling test sequences test specification language ttcn 3 routing protocol;timed test sequences;ospfv2;test generation;constraint handling;robustness;robustness testing;time sampling time constrained protocol robustness testing formal model timed test sequences;time constrained protocol;timed npefsm model;routing protocol;specification languages constraint handling grid computing program testing routing protocols;robustness protocols time factors sampling methods timing automata character generation mesh generation automatic testing delay effects;grid computing;time constraints;ttcn 3;time constraint	Network protocols often have time constraints. Robustness testing of protocol with time constraints aims to detect vulnerabilities of its implementation. However, related theory is not well developed. This paper proposes a novel Timed NPEFSM model containing sufficient inputs with various time values and their processing rules to formalize protocol with time constraints. In order to test delay transitions, Grid Timed NPEFSM is proposed which can be generated by state characterization of Timed NPEFSM using time sampling. Thus, these two models jointly guide robustness testing of protocol with time constraints. For test generation, we propose timed anomalous test case in which only state under test is characterized by time sampling and this method can simplify test sequences largely without compromising test coverage. We also propose several strategies to construct timed test sequences. To inject test data efficiently and effectively, three types of timed compound anomalous test cases are proposed. Standard test specification language TTCN-3 is extended to describe test generation. We illustrate our method using a routing protocol: OSPFv2.	communications protocol;robustness testing	Chuanming Jing;Xia Yin;Zhiliang Wang;Jianping Wu	2008		10.1109/ICYCS.2008.401	communications protocol;real-time computing;computer science;distributed computing;routing protocol;programming language;computer network	SE	-11.598601388256524	30.306422054898082	174028
f3d27133f840fd6a74a0aea4d2e4128671a47e17	verification system for real-time specification based on extended real-time logic	formal specification;clocks;temporal logic;real time;logic;formal verification;model checking;verification system;real time systems logic timing clocks labeling solid modeling context modeling explosions computer science cities and towns;freeze quantification;solid modeling;freeze quantification real time specification extended real time logic timed ctl verification system bounded temporal operator;formal verification real time systems formal specification temporal logic;real time specification;cities and towns;extended real time logic;explosions;real time logic;computer science;state explosion;context modeling;concurrent process;bounded temporal operator;timed ctl;labeling;real time systems;timing;time constraint	Real-time system consists of many concurrent processes and behaves on strict timing conditions. It is important to verify the timing conditions o f real-time system. In this paper, we propose extended TCTL(Timed CTL) and effective real-time model checking as follows. (1)The timing description of extended TCTL consists of both freeze quantification and bounded temporal operator, For this extension, extended TCTL admits timing constraints between distant contexts. (2)Real time model checking consists of both labelling algorithm and geometric region method. For this method, we can avoid the state explosion problem. We have developed the verification system, and showed our method effective. Key word : real-time system, timing verification, real-time logic, model-checking 1 . Introduction Real-time system consists of many concurrent processes and has strict timing condition. Especially, it is important to specify and verify timing conditions[ I]. There are two methods such as model checking and language inclusion algorithm[2]. In this paper, we apply model checking to verification problem, because many interesting verification properties are expressive. In model checking, time model and timing representation method, verification method are important. There are discrete time model and fictitious clock time model, dense time model[3] as time model. But in the case of discrete time model and fictitious clock time model , asynchronous system can not be specified. It is necessary to apply dense time model to asynchronous system. In this paper, we specify and verify asynchronous real-time system based on dense time model, We specify system specification by timed automaton[3]. Temporal logic as verification property specification language needs many discussions as follows. There are bounded temporal operator and freeze quantification (HalfOrder temporal logic), explicit clock variable (First-Order temporal logic) as timing specification method. The example of bounded temporal operator[4] is as follows. . This means that p is true until q is true at most 10. The example of freeze quantification[5] is as follows. This means that p is true at most 10. The example of explicit clock variable[6] is as follows. V x 3 x O ( ( p Anow=x)+pU( q Anow=yAySx+lO)) This m e m that every p -state of time x is followed by p state and eventually, a q -state of time y5x+lO, where now is a global dynamic clock variable. Compared with three representations, bounded temporal operator is simple representation, but can not specify constraints between distance contexts. For this, bounded tempord'operator can not specify following specification. In this paper, in oerder to specify constraints between distance contexts, we combine freeze quantification with bounded temporal operator. In the case of explicit clock variable, we can specify and verify real-time specifications by the same. method. TCTL(Timed CTL)[7] and TPTL(Timed PTL)[S] have been proposed before. TCTL(Timed CTL) is based on dense time model and bounded temporal operator, and TPTL(Timed PTL) is based on discrete time model and freeze quantification. In this paper, we propose extended TCTL, combining bounded temporal operator with freeze quantification . Model checking is to label timed Kripke structure with real-time temporal logic considering timing conditions. The methods of dense time verification are classified into three approaches as follows. (1)discrete time verification[8 1, (2)region graph verification[7], (3)geometric region verification[91. Both of (1) and (2) are not practical because the size of the state space increases exponentially with the maximum value of the timing requirements. In this paper, we propose verification method combining labelling algorithm[ 101 with geometric region verification because of avoiding state explosion problem. P U<,, 9	advanced configuration and power interface;algorithm;asynchronous system;ctl*;existential quantification;first-order predicate;formal language;freeze (software engineering);kripke structure (model checking);model checking;pass transistor logic;property specification language;real-time clock;real-time computing;real-time operating system;real-time transcription;requirement;state space;static timing analysis;temporal logic;timed event system	Satoshi Yamane	1995		10.1109/RTCSA.1995.528771	model checking;real-time computing;simulation;temporal logic;formal verification;computer science;formal specification;solid modeling;programming language;logic;algorithm	Embedded	-11.26450433637827	25.331058251769548	175015
43a93c9ebeaa4a564181d88dbc666824d8e7c449	my model checker died!: how well did it do?	probability;model checking;interface automata;state space;state explosion;behaviour models	System specifications have long been expressed through automata based languages, enabling verification techniques such as model checking. These verification techniques can assess whether a property holds or not, given a system specification. However, model checking techniques suffer from the traditionally called state explosion problem, that is, models which are useful for analysis grow exponentially in size when verifying their concurrent behaviour. This state explosion problem is a serious limitation of model checking techniques, often making the application of tools that apply them infeasible, and limiting techniques to only a partial exploration of the complete state space. In this work we propose a novel approach that could help gather useful, quantified domain-related information from such incomplete explorations, leveraging on the concept of probabilistic behaviour models of the environment, for supporting dependability cases.	automata theory;behavioral modeling;dependability;model checking;state space;verification and validation	Esteban Pavese;Víctor A. Braberman;Sebastián Uchitel	2010		10.1145/1808877.1808884	model checking;simulation;computer science;theoretical computer science;abstraction model checking;algorithm	SE	-11.510438148443871	28.347384292907492	176371
868485c26a7de258fd18dc04ff0e197d663fc701	the global time assumption and semantics for concurrent systems	distributed system;formal model;concurrent systems	We develop a formal model for distributed system executions.Our model helps to bridge the existing gap between formalism and intuition in this field. Our models are built of global rime models (We use the term ‘global time model’ to denote the intuitive modeling of operation executions as (time) intervals on a straight line). Our semantics is shown to be sound and complete with respect to Lamport’s deduction theory 171. Using our semantics we show that arguments that are carried out in global rime models apply to a most general setting. We give a syntactic characterization of a class of issues for which an analysis in global time models suffices. We prove that many questions fall into this class of issues, in particular protocols for implementing atomic registers from safe or regular ones can be analyzed in global time models without losing any generality. (regardless of the number of values or of readers or writers of these registers). Permission to copy without fee all or part of this material is granted provided that the copies are not made or distributed for direct commercial advantage, the ACM copyright notice and the title of the publication and its date appear, and notice is given that copying is by permission of the Association for Computing Machinery. To copy otherwise, or to republish, requires a fee and/or specific permission.	concurrency (computer science);distributed computing;mathematical model;natural deduction;semantics (computer science)	Shai Ben-David	1988		10.1145/62546.62583	real-time computing;failure semantics;computer science;theoretical computer science;distributed computing;liveness	PL	-11.666986755110397	25.679199588126178	177001
6573566981b0f3b36f5d94db3b064503a3e6f07f	enhancing the inverse method with state merging	equivalent time-abstract manner;inverse method;inverse method;general setting;computational space;state space;parametric timed automata;model-checker uppaal;pta a;experimental result;timed automata	Keeping the state space small is essential when verifying realtime systems using Timed Automata (TA). In the model-checker Uppaal, the merging operation has been used extensively in order to reduce the number of states. Actually, Uppaal’s merging technique applies within the more general setting of Parametric Timed Automata (PTA). The Inverse Method (IM ) for a PTA A is a procedure that synthesizes a zone around a given point π (parameter valuation) over which A is guaranteed to behave similarly. We show that the integration of merging into IM leads to the synthesis of larger zones around π. It also often improves the performance of IM , both in terms of computational space and time, as shown by our experimental results.	computation;model checking;parametric polymorphism;program test authority;state space;timed automaton;uppaal;value (ethics);verification and validation	Étienne André;Laurent Fribourg;Romain Soulat	2012		10.1007/978-3-642-28891-3_10	discrete mathematics;mathematics;algorithm	Logic	-11.106671759328316	27.611147522550716	177307
5c18f61d6e420bf950620c442b8436e28997ac5d	learning control of disassembly petri net-an approach with discrete event system theory	learning control;supervisory control;learning artificial intelligence learning automata finite automata petri nets discrete event systems industrial robots robots;learning automata;task dependent specifications learning control disassembly petri net discrete event system theory supervisory control system task independent specifications equipment related specifications learning automata system;discrete event system;control systems discrete event systems clamps fixtures robots production systems assembly tree graphs petri nets costs;industrial robots;robots;finite automata;discrete event systems;petri nets;learning artificial intelligence;petri net	This paper studies the learning control problem of disassembly task sequence. The proposed learning control system has two sub systems. One of them is a supervisory control system which can realize the implicit specifications such as equipment-related or task-independent specifications. The other one is a learning automata system which can realize the explicit specifications such as task-dependent specifications. This approach allows the flexible design to accommodate frequently changing manufacturing requirements. Some simulation results to verify the effectiveness of the proposed system are shown.	disassembler;petri net;systems theory	Tatsuya Suzuki;Tadanao Zanma;Akio Inaba;Shigeru Okuma	1996		10.1109/ROBOT.1996.503593	control engineering;real-time computing;simulation;computer science;artificial intelligence;finite-state machine;petri net	Robotics	-5.222446596015869	28.811752408260322	177634
80b503817633f772d19ffd2da9f3d52ef970212a	verification of polyhedral-invariant hybrid automata using polygonal flow pipe approximations	verification;modelizacion;sistema hibrido;computational techniques;automaton;modelisation;automata;automate;hybrid system;hybrid automata;verificacion;modeling;systeme hybride	This paper presents a computational technique for verifying properties of hybrid systems with arbitrary continuous dynamics. The approach is based on the computation of approximating automata, which are nite-state approximations to the (possibly innnite-state) discrete-trace transition system for the hybrid system. The fundamental computation in the generation of approximating automata is the mapping of sets of continuous states to the boundaries of the location invariants. This mapping is computed by intersecting ow pipes, the sets of reach-able states for continuous systems, with the invariant boundaries. Flow pipes are approximated by sequences of overlapping convex polygons. The paper presents an application of the computational procedure to a benchmark hybrid system, a batch evaporator.	approximation algorithm;automata theory;benchmark (computing);computation;hybrid automaton;hybrid system;named pipe;polyhedral;transition system;verification and validation	Alongkrit Chutinan;Bruce H. Krogh	1999		10.1007/3-540-48983-5_10	discrete mathematics;computer science;artificial intelligence;theoretical computer science;automaton;algorithm;hybrid system	Logic	-9.052511403296513	28.133814691398666	177855
905f7a231a80fa00c87b41d6b4a85561e54f56a4	a simple method for parameterized verification of cache coherence protocols	teoria demonstracion;concepcion asistida;computer aided design;diseno circuito;verificacion modelo;theorie preuve;shared memory;securite;proof theory;memoria compartida;circuit design;metodo formal;methode formelle;verification modele;program verification;formal method;theorem proving;demonstration theoreme;verificacion programa;cache coherence protocol;model checking;safety;conception assistee;invariante;conception circuit;demostracion teorema;predicate abstraction;verification programme;seguridad;invariant;memoire partagee	We present a simple method for verifying the safety properties of cache coherence protocols with arbitrarily many nodes. Our presentation begins with two examples. The first example describes in intuitive terms how the German protocol with arbitrarily many nodes can be verified using a combination of Murphi model checking and apparently circular reasoning. The second example outlines a similar proof of the FLASH protocol. These are followed by a simple theory based on the classical notion of simulation proofs that justifies the apparently circular reasoning. We conclude the paper by discussing what remains to be done and by comparing our method with other approaches to the parameterized verification of cache coherence protocols, such as compositional model checking, machine-assisted theorem proving, predicate abstraction, invisible invariants, and cut-off theorems.	adobe flash;automated theorem proving;cache coherence;formal verification;model checking;predicate abstraction;simulation;verification and validation	Ching-Tsun Chou;Phanindra K. Mannava;Seungjoon Park	2004		10.1007/978-3-540-30494-4_27	model checking;shared memory;discrete mathematics;formal methods;computer science;theoretical computer science;computer aided design;invariant;circuit design;proof theory;mathematics;automated theorem proving;programming language;algorithm	Logic	-11.342141200316437	26.567377523969082	178400
4c4bec0c5609eac4ec161fd9dcee80b472753392	practical first-order temporal reasoning	verification;first order temporal logics;liveness properties;protocols;logic automata delay systems safety broadcasting computer science formal verification protocols upper bound;formal specification;parameterised systems;infinite state systems verification;temporal logic;logic;asynchronous systems;infinite state systems;upper bound;automata;formal verification;infinite state verification;first order temporal logic;infinite state systems specification;fairness properties;safety;communication delay;delay systems;infinite state verification practical first order temporal reasoning infinite state systems specification infinite state systems verification parameterised systems first order temporal logic deductive verification temporal language asynchronous systems communication delays liveness properties fairness properties;computer science;broadcasting;temporal language;infinite state systems verification first order temporal logics;deductive verification;temporal reasoning formal specification formal verification temporal logic;practical first order temporal reasoning;communication delays;temporal reasoning	In this paper we consider the specification and verification of infinite-state systems using temporal logic. In particular, we describe parameterised systems using a new variety of first-order temporal logic that is both powerful enough for this form of specification and tractable enough for practical deductive verification. Importantly, the power of the temporal language allows us to describe (and verify) asynchronous systems, communication delays and more complex liveness and fairness properties. These aspects appear difficult for many other approaches to infinite-state verification.	asynchronous system;automated theorem proving;cobham's thesis;fairness measure;first-order predicate;liveness;temporal logic	Clare Dixon;Michael Fisher;Boris Konev;Alexei Lisitsa	2008	2008 15th International Symposium on Temporal Representation and Reasoning	10.1109/TIME.2008.15	discrete mathematics;linear temporal logic;interval temporal logic;computation tree logic;computer science;theoretical computer science;algorithm;functional verification;temporal logic of actions	Logic	-11.380526359267726	25.773065115262646	179320
ca75649e9242112125a1cb6a6a50b25929053688	integrating discrete- and continuous-time metric temporal logics through sampling	systeme temps reel;modelizacion;continuous time;variabilidad;inf;metric temporal logic;logica temporal;sistema temporizado;temporal logic;real time;echantillonnage;metodo formal;timed system;methode formelle;discretization;formal methods;temps continu;semantics;metric;discrete time;tiempo continuo;logical programming;continuous time models;semantica;semantique;integration;formal method;sampling;modelisation;control proceso;programmation logique;dense time;process control;systeme temporise;metrico;real time system;sistema tiempo real;variability;tiempo discreto;muestreo;temps discret;variabilite;programacion logica;modeling;logique temporelle;commande processus;metrique;real time systems	Real-time systems usually encompass parts that are best described by a continuous-time model, such as physical processes under control, together with other components that are more naturally formalized by a discrete-time model, such as digital computing modules. Describing such systems in a unified framework based on metric temporal logic requires to integrate formulas which are interpreted over discrete and continuous time. In this paper, we tackle this problem with reference to the metric temporal logic TRIO, that admits both a discrete-time and a continuous-time semantics. We identify sufficient conditions under which TRIO formulas have a consistent truth value when moving from continuous-time to discrete-time interpretations, or vice versa. These conditions basically involve the restriction to a proper subset of the TRIO language and a requirement on the finite variability over time of the basic items in the specification formulas. We demonstrate the approach with an example of specification and verification.	automata theory;boson sampling;computer;discretization;heart rate variability;high- and low-level;hybrid automaton;hybrid system;real-time locating system;refinement (computing);sampling (signal processing);scott continuity;temporal logic;unified framework	Carlo A. Furia;Matteo Rossi	2006		10.1007/11867340_16	sampling;discrete time and continuous time;real-time computing;formal methods;systems modeling;metric;temporal logic;computer science;artificial intelligence;calculus;discretization;mathematics;programming language;algorithm	Embedded	-9.78560024744967	26.023460560878704	179380
36b24be1b436f037397a7561ca264c07eede465b	dynamic verification of systemc with statistical model checking		Transaction-level modeling with SystemC has been very successful in describing the behavior of embedded systems by providing high-level executable models, in which many of them have an inherent probabilistic behavior, i.e., random data, unreliable components. It is crucial to evaluate the quantitive and qualitative analysis of the probability of the system properties. Such analysis can be conducted by using probabilistic model checking. However, this method is unfeasible to deal with large and complex systems and works directly with systems modeling in SystemC, due to the state space explosion. In this paper, we demonstrate the successful use of statistical model checking to carry out such analysis for systems modeled in SystemC. Our verification framework allows designers to express a wide range of useful properties that can be analyzed. Key-words: Runtime Verification, Probabilistic Assertion, Statistical Model Checking, Program Verification, SystemC Dynamic Verification of SystemC with Statistical Model Checking Résumé : La modélisation au niveau transactionnel de SystemC a très bien réussi à décrire le comportement des systèmes embarqués en fournissant de haut niveau des modèles exécutables, dans laquelle beaucoup d’entre eux ont un comportement probabiliste inhérente, à savoir, des données aléatoires, des composants fiables. Il est crucial pour évaluer l’analyse quantitative et qualitative de la probabilité’ de les propriétés du système. Une telle analyse peut être effectuée à l’aide de probabilistic model checking. Cependant, cette méthode est impossible de traiter avec les systèmes vastes et complexes et travaille directement avec la modélisation des systèmes en SystemC, en raison de l’espace explosion de l’état. Dans cet article, nous démontrons l’utilisation réussie de statistical model checking à effectuer une telle analyse pour les systèmes modélisés dans SystemC. Notre cadre de vérification permet aux concepteurs d’exprimer une large gamme de propriétés utiles qui peuvent être analysés. Mots-clés : Runtime Verification, Probabilistic Assertion, Statistical Model Checking, Program Verification, SystemC Dynamic Verification of SystemC with Statistical Model Checking 3	complex systems;council for educational technology;embedded system;estdomains;executable;formal verification;high- and low-level;linear algebra;model checking;randomness;runtime verification;state space;statistical model;systemc;systems modeling;transaction-level modeling	Van Chan Ngo;Axel Legay;Jean Quilbeuf	2014	CoRR		model checking;reliability engineering;real-time computing;computer science;theoretical computer science;abstraction model checking	Logic	-9.996112589621665	28.4317858443775	180653
073b881a3334aa24a1b141fc49e6014ffa101d74	on the parallel risch algorithm (iii): use of tangents	general and miscellaneous mathematics computing and information science;mathematical logic;programming 990200 mathematics computers;algorithms;logic programs;parallel processing	In this note, we look at the extension to the parallel Risch algorithm (see, e.g., the papers by Norman & Moore [1977], Norman & Davenport [1979], ffitch [1981] or Davenport [1982] for a description of the basic algorithm) which represents trigonometric functions in terms of tangents, rather than instead of complex exponentials.	norman packard;risch algorithm	James H. Davenport	1982	ACM SIGSAM Bulletin	10.1145/1089302.1089303	parallel processing;mathematical logic;computer science;mathematics;algorithm;algebra	Theory	-11.259265911829424	32.02807142878538	182180
472d45bafe2ae0bbab590468ff2cf6fcb37f1c6c	sampling-based algorithms for optimal motion planning using process algebra specifications	sampling methods electric vehicles formal languages optimal control path planning process algebra;kripke structure sampling based algorithms optimal motion planning process algebra specifications formal language specifications differential constraints autonomous electric vehicles mobility on demand scenario;trajectory heuristic algorithms algebra charging stations cost function robots model checking	This paper investigates motion-planning using formal language specifications for dynamical systems with differential constraints. In particular, we focus on process algebra as a language to specify complex task specifications motivated by autonomous electric vehicles operating in a mobility-on-demand scenario. We use ideas from sampling-based motion-planning algorithms to incrementally construct a finite abstraction of the dynamical system as a Kripke structure. Given a task specification expressed as a process graph, we use model checking techniques to construct a weighted product graph of the specification with the Kripke structure. We then devise an algorithm that provably converges to the optimal trajectory of the dynamical system that satisfies the task specification as the number of the states in the Kripke structure goes to infinity. The algorithm is demonstrated in simulation experiments, viz., charging the electric car at a busy charging station and scheduling pick-ups and drop-offs of passengers.	algorithm;autonomous robot;dynamical system;experiment;formal language;formal specification;ideographic rapporteur group;kripke structure (model checking);model checking;motion planning;process calculus;sampling (signal processing);scheduling (computing);simulation;smart tv;specification language;viz: the computer game	Valerio Varricchio;Pratik Chaudhari;Emilio Frazzoli	2014	2014 IEEE International Conference on Robotics and Automation (ICRA)	10.1109/ICRA.2014.6907642	mathematical optimization;discrete mathematics;theoretical computer science;mathematics	Robotics	-10.364555201941558	28.016198226516106	182538
0acc1d7f8851d4a0672450ac4a63f45f46eb5b45	an analytical method for well-formed workflow/petri net verification of classical soundness	soundness;verification;decidability;petri net	In this paper we consider workflow nets as dynamical systems governed by ordinary difference equations described by a particular class of Petri nets. Workflow nets are a formal model of business processes. Well-formed business processes correspond to sound workflow nets. Even if it seems necessary to require the soundness of workflow nets, there exist business processes with conditional behavior that will not necessarily satisfy the soundness property. In this sense, we propose an analytical method for showing that a workflow net satisfies the classical soundness property using a Petri net. To present our statement, we use Lyapunov stability theory to tackle the classical soundness verification problem for a class of dynamical systems described by Petri nets. This class of Petri nets allows a dynamical model representation that can be expressed in terms of difference equations. As a result, by applying Lyapunov theory, the classical soundness property for workflow nets is solved proving that the Petri net representation is stable. We show that a finite and non-blocking workflow net satisfies the sound property if and only if its corresponding PN is stable, i.e., given the incidence matrix A of the corresponding PN, there exists a Φ strictly positive m vector such that AΦ ≤ 0. The key contribution of the paper is the analytical method itself that satisfies part of the definition of the classical soundness requirements. The method is designed for practical applications, guarantees that anomalies can be detected without domain knowledge, and can be easily implemented into existing commercial systems that do not support the verification of workflows. The validity of the proposed method is successfully demonstrated by application examples.	blocking (computing);business process;correctness (computer science);download;dynamical system;existential quantification;formal language;incidence matrix;lyapunov fractal;non-blocking algorithm;open research;recurrence relation;requirement;well-formed petri net	Julio B. Clempner	2014	Applied Mathematics and Computer Science		discrete mathematics;stochastic petri net;computer science;theoretical computer science;mathematics;distributed computing;process architecture;petri net	ML	-7.734022524720752	26.09722993658575	182724
0485c96454665f2389969caf3e61d26ef278eebf	decidability and expressive power of real time logics	linear time temporal logic;linear order;logica temporal;sistema temporizado;temporal logic;real time;metodo formal;timed system;methode formelle;formal method;expressive power;first order;temps reel;linear time;systeme temporise;tiempo real;decidibilidad;real time logic;decidabilite;logique temporelle;decidability	Temporal Logic based on the two modalities “Since” and “Until” (TL) is popular among computer scientists as the framework for reasoning about a system evolving in time. This logic is usually referred to as the standard linear time temporal logic. The “linear time“ appears in the name of this logic probably because when it was introduced by Pnueli its intended models were linear orders; more precisely, ω-models. The adjective “standard” is presumable used due to the Kamp theorem which states that it is expressively equivalent (over the ω-models) to first order monadic logic of order – a very fundamental logic.	decision problem	Alexander Moshe Rabinovich	2006		10.1007/11867340_3	predicate logic;dynamic logic;zeroth-order logic;decidability;time complexity;discrete mathematics;linear temporal logic;description logic;formal methods;higher-order logic;temporal logic;many-valued logic;interval temporal logic;computation tree logic;computer science;intermediate logic;artificial intelligence;first-order logic;mathematics;programming language;substructural logic;multimodal logic;expressive power;second-order logic;total order;algorithm;philosophy of logic	Logic	-9.802185196957339	25.349119860166585	183044
b0883e9b834a195ca6c74c73f8acee78eed9905c	optimal sensor selection for ensuring diagnosability in labeled petri nets	computacion informatica;grupo de excelencia;place transition nets;ciencias basicas y experimentales;discrete event systems;petri nets;fault diagnosis	This paper studies the problem of optimal static sensor selection for ensuring diagnosability in labeled bounded and unbounded Petri nets. Starting from a non-diagnosable labeled Petri net system, we present a systematic procedure to design a new labeling function that makes the system diagnosable and optimizes a given objective function. This procedure employs a particular net, called Verifier Net, that is built from the original Petri net and provides necessary and sufficient conditions for diagnosability. We exploit the system structure captured in the verifier net to guide the search for the desired new labeling function. The search is performed over an unfolding of the reachability/coverability tree of the verifier net and follows a set of rules that capture the relabeling strategy. We allow for unobservable transitions that cannot be labeled as well as for multiple fault classes. We formulate an integer linear programming problem that finds an optimal labeling function when numerical costs are associated with transition relabeling. © 2013 Elsevier Ltd. All rights reserved.	automata theory;enumerated type;finite-state machine;graph labeling;integer programming;iteration;iterative method;linear programming relaxation;loss function;numerical analysis;optimal control;optimization problem;petri net;reachability;selection algorithm;sensor;state space;structural analysis;unfolding (dsp implementation)	Maria Paola Cabasino;Stéphane Lafortune;Carla Seatzu	2013	Automatica	10.1016/j.automatica.2013.04.041	discrete mathematics;stochastic petri net;mathematics;distributed computing;petri net;algorithm	AI	-7.325459205252402	28.513632431612788	183421
7035a3e07a131f1905d01b4a683dc5f7aca4a960	a family of resource-bound real-time process algebras	real time scheduling;real time process algebra;resource availability;power consumption;process algebra;concurrent process;real time systems	This paper describes three real-time process algebras, ACSR, PACSR and ACSR-VP. ACSR is a resourcebound real-time process that supports synchronous timed actions and asynchronous instantaneous events as well as the notions of resource, priority, exception, and interrupt. PACSR is a probabilistic extension of ACSR with resources that can fail and associated failure probabilities. ACSR-VP extends ACSR with value passing between processes and parameterized process definitions. This paper also provides three simple real-time system examples to illustrate the expressive power and analysis technique of each process algebra.	embedded system;exception handling;expressive power (computer science);interrupt;introduction to algorithms;process calculus;real-time clock;real-time computing;scheduling analysis real-time systems;semantics (computer science);vp/css	Insup Lee;Jin-Young Choi;Hee-Hwan Kwak;Anna Philippou;Oleg Sokolsky	2001		10.1016/j.entcs.2005.12.085	process calculus;real-time computing;computer science;distributed computing;programming language	Embedded	-10.972394138127793	25.748178240965117	183770
8285df63c57acbfd29496636f03d1618f3f20fc1	randomized control design through probabilistic validation	probability;uncertainty;algorithm design and analysis;probabilistic logic;optimization;iterative methods;robustness;accuracy;iteration;randomized algorithms	In this paper, we present a randomized strategy for design under uncertainty. The main contribution is to provide a general class of sequential algorithms which satisfy the required specifications using probabilistic validation. At each iteration of the sequential algorithm, a candidate solution is probabilistically validated by means of a set of randomly generated uncertainty samples. The idea of validation sets has been used in some randomized algorithms when a given candidate solution is classified as probabilistic solution when it satisfies all the constraints on the validation set. In this paper, we show the limitations of this strategy and present a more general setting where the candidate solution may violate the specifications for a reduced number of elements of the validation set. This generalized scheme exhibits some advantages, in particular in terms of obtaining a probabilistic solution.	iteration;probabilistic turing machine;probabilistic automaton;procedural generation;randomized algorithm;sequential algorithm	Teodoro Alamo;Amalia Luque Sendra;Daniel R. Ramírez;Roberto Tempo	2012	2012 American Control Conference (ACC)		algorithm design;mathematical optimization;probabilistic analysis of algorithms;uncertainty;machine learning;probability;data mining;mathematics;accuracy and precision;iterative method;probabilistic logic;randomized algorithm;statistics;robustness	EDA	-8.693173697819553	27.97858259226421	184865
394dba671fc42c44bf986adefcf174d7a2e5eda1	state explosion in almost-sure probabilistic reachability	sistema operativo;probabilistic automaton;almost sure convergence;reachability;procesamiento informacion;sistema temporizado;algorithm analysis;loi probabilite;ley probabilidad;complexite calcul;convergencia casi segura;metodo formal;timed system;methode formelle;formal methods;probabilistic system;controle modele;systeme non deterministe;formal method;non deterministic system;complejidad computacion;model checking;operating system;computational complexity;informatique theorique;asequibilidad;probability distribution;information processing;probabilistic systems;automate probabiliste;systeme temporise;atteignabilite;automata probabilista;systeme exploitation;analyse algorithme;timed automata;systeme parallele;sistema no determinista;parallel system;state explosion;traitement information;analisis algoritmo;sistema paralelo;convergence presque sure;computer theory;informatica teorica	We show that the problem of reaching a state set with probability 1 in probabilisticnondeterministic systems operating in parallel is EXPTIME-complete. We then show that this probabilistic reachability problem is EXPTIME-complete also for probabilistic timed automata.	automata theory;exptime;reachability problem;timed automaton	François Laroussinie;Jeremy Sproston	2007	Inf. Process. Lett.	10.1016/j.ipl.2007.01.003	probability distribution;model checking;probabilistic analysis of algorithms;formal methods;probabilistic ctl;convergence of random variables;computer science;artificial intelligence;probabilistic automaton;mathematics;programming language;computational complexity theory;reachability;algorithm	Logic	-9.239689961298843	26.68911128137637	186212
7cb59b49e75505c3e098788e7678f10a4de6d40e	a method for the specification and verification of distributed systems by a timed automaton	verification;distributed systems;specification;distributed system;timed automaton	In this paper, we propose a method for the specification and verification of distributed systems. We can easily specify fairness and timing constraints, and can effectively verify distributed systems by our proposed method. In order to specify fairness, an enable condition and a performed condition are attached to a finite set of states in our proposed specification method. In order to effectively verify distributed systems, we restrict the timing constraints of a timed automaton. Verification systems developed on the basis of our proposed method have shown it to be effective.	distributed computing;timed automaton	Satoshi Yamane	1997	Systems and Computers in Japan	10.1002/(SICI)1520-684X(199702)28:2%3C11::AID-SCJ2%3E3.0.CO;2-U	compiler;symbolic computation;verification;systems modeling;computer science;theoretical computer science;formal specification;computational complexity theory;timed automaton;specification;algorithm	Logic	-10.29176040005042	26.271378817901976	187189
7b584088348a205bb80d620df4705d1fed602250	bounded model checking for knowledge and real time	systeme temps reel;verificacion modelo;multiagent system;logica temporal;multi agent system;temporal logic;real time;interpreted systems;verification modele;intelligence artificielle;program verification;bounded model checking;verificacion programa;temporal epistemic logics;model checking;temps reel;logique epistemique;epistemic logic;tiempo real;artificial intelligence;real time system;decidibilidad;sistema tiempo real;inteligencia artificial;sistema multiagente;decidabilite;verification programme;logique temporelle;systeme multiagent;decidability;logica epistemica;real time systems	We present TECTLK, a logic to specify knowledge and real time in multi-agent systems. We show that the TECTLK model checking problem is decidable, and we present an algorithm for bounded model checking based on a discretisation method. We exemplify the use of the technique by means of the ''Railroad Crossing System'', a popular example in the multi-agent systems literature.	model checking	Alessio Lomuscio;Wojciech Penczek;Bozena Wozna	2007	Artif. Intell.	10.1016/j.artint.2007.05.005	decidability;model checking;simulation;real-time operating system;epistemic modal logic;temporal logic;computer science;artificial intelligence;multi-agent system;abstraction model checking;algorithm	AI	-9.81901476648047	25.721651855450542	187459
54850587a7543336149d063b7a5ddf1ca96f4e46	an automated framework for formal verification of timed continuous petri nets	linear predicates;software tool;freely downloadable software tool automated framework formal verification timed continuous petri nets contpns linear temporal logic ltl formula linear predicates ltl specification piecewise affine system pwa system polyhedral partition graphs;mathematics computing;network synthesis;temporal logic;ltl formula;logic;freely downloadable software tool;satisfiability;formal verification petri nets logic explosions iterative methods software tools mathematical model power system modeling network synthesis discrete event systems;graphs;contpns;iterative methods;public domain software;discrete event system;formal verification;automated framework;linear temporal logic;pwa system;piecewise affine system;discrete event systems;mathematical model;temporal logic formal verification mathematics computing petri nets public domain software software tools;piecewise affine pwa systems discrete event systems formal analysis;explosions;software tools;timed continuous petri nets;petri nets;power system modeling;formal analysis;iteration method;petri net;ltl specification;polyhedral partition;piecewise affine pwa systems	In this paper, we develop an automated framework for formal verification of timed continuous Petri nets (ContPNs). Specifically, we consider two problems: (1) given an initial set of markings, construct a set of unreachable markings and (2) given a Linear Temporal Logic (LTL) formula over a set of linear predicates in the marking space, construct a set of initial states such that all trajectories originating there satisfy the LTL specification. The starting point for our approach is the observation that a ContPN system can be expressed as a Piecewise Affine (PWA) system with a polyhedral partition. We propose an iterative method for analysis of PWA systems from specifications given as LTL formulas over linear predicates. The computation mainly consists of polyhedral operations and searches on graphs, and the developed framework was implemented as a freely downloadable software tool. We present several illustrative numerical examples.	algorithm;computation;deadlock;formal verification;graph (discrete mathematics);item unique identification;iterative method;linear temporal logic;model checking;numerical analysis;petri net;picasa web albums;polyhedron;programming tool;refinement (computing);regular expression;unreachable memory	Marius Kloetzer;Cristian Mahulea;Calin Belta;Manuel Silva Suárez	2010	IEEE Transactions on Industrial Informatics	10.1109/TII.2010.2050001	discrete mathematics;computer science;artificial intelligence;theoretical computer science;iterative method;petri net;algorithm	Logic	-10.903079593234919	27.94497133297814	187837
771c9991a194a18670c6af35c7d38a36d8887f6e	diagnosability of discrete event systems: a petri net based approach	discrete event systems equations petri nets labeling fires;input output;fault diagnosis discrete event systems petri nets;discrete event system;polynomial time discrete event systems interpreted petri net model based fault diagnosis partially observed events modular modelling methodology input output diagnosability property diagnoser scheme;polynomial time;discrete event systems;partial observation;petri nets;petri net;fault diagnosis	This work deals with model based fault diagnosis of discrete event systems. The model of the system, expressed as an interpreted Petri net (IPN) describes partially observed events and states, and includes all possible faulty states. Based on a modular modelling methodology, the input-output diagnosability property is introduced and structurally characterized. Then a diagnoser scheme is proposed allowing fault detection and location in polynomial time.	algorithm;computation;fault detection and isolation;interplanet;online and offline;petri net;polynomial;reachability;time complexity	Antonio Ramírez-Treviño;Elvia Ruiz-Beltrán;Israel Rivera-Rangel;Ernesto López-Mellado	2004	IEEE International Conference on Robotics and Automation, 2004. Proceedings. ICRA '04. 2004	10.1109/ROBOT.2004.1307205	discrete mathematics;real-time computing;stochastic petri net;discrete event dynamic system;computer science;control theory;mathematics;petri net	Robotics	-7.1268028898841385	27.943330341162284	187881
41762156f1c26ffab3ca82fd259dbe6db5285f14	on the analysis and synthesis of coloured petri nets	manufacturing system coloured petri nets decomposition technique system analysis system synthesis matrix algebra;manufacturing systems;coloured petri net;matrix algebra petri nets manufacturing systems;matrix algebra;ease of use;petri nets assembly matrices automatic control circuit synthesis flexible manufacturing systems resource management books explosions;system analysis;petri nets;petri net	"""This paper proposes an analysis and synthesis method for coloured Petri nets (CPN). We present basic CPN (paths and circuits), constituent of any CPN and determine their marking and firing invariants; subsequent properties (boundedness, consistency, and liveness) are then thoroughly examined. We exhaustively detail the assembly of these basic bricks to obtain larger (real-life) models, ensuring that """"good"""" properties are automatically preserved. This (de)composition technique is finally applied to the examples of a FIFO stock and a FMS, to validate and show the ease of use of our method and, eventually, to enable benchmarking with other analysis methods."""	coloured petri net;fifo (computing and electronics);item unique identification;liveness;real life;usability	Marc Bourcerie;Jean-Yves Morel	2004	2004 IEEE International Conference on Systems, Man and Cybernetics (IEEE Cat. No.04CH37583)	10.1109/ICSMC.2004.1399864	stochastic petri net;computer science;control theory;process architecture;petri net;algorithm	Embedded	-6.543560192892929	27.680591373637753	190780
668dad6ed4d5ffd92bfba70a47b9f24e4ead18a2	periodic finite-state machines	time triggered;periodic clock constraints;distributed control systems periodic finite state machines fsm framework system temporal validity timed automata sparse global time base state variables periodic clock constraints time triggered activity;distributed control systems;time measurement;clocks;model system;distributed control system;time triggered activity;real time;real time data;real time systems computational complexity finite state machines;automata;finite state machines;clocks predictive models automata real time systems time factors distributed control humans problem solving time measurement synchronization;time factors;sparse global time base;computational complexity;synchronization;predictive models;humans;timed automata;fsm framework system;state variables;distributed control;finite state machine;problem solving;periodic finite state machines;real time systems;temporal validity	Finite state machine (FSM) models are widely used to model the operations of computer systems. Since the basic FSM model is timeless, it is not possible to model within the basic FSM framework system properties that are dependent on the progression of real time, such as the duration of computations or the limited temporal validity of real-time data. To overcome these limitations, efforts have been made to modify the FSM model to include some notion of time. It is the objective of this paper to expand existing work on basic FSMs and timed automata to include the concept of a sparse global time base as a central element of the model. We call such an extended FSM model a periodic finite state machine (PFSM) model. The PFSM model also incorporates the notions of state variables, global time, periodic clock constraints, and time-triggered activities. Thereby, PFSMs enable a concise and intuitive representation of distributed control systems and reduce the gap between a modeled system and its implementation	automata theory;color gradient;computation;distributed control system;finite-state machine;real-time data;sparse matrix;timed automaton	Hermann Kopetz;Christian El Salloum;Bernhard Huber;Roman Obermaisser	2007	10th IEEE International Symposium on Object and Component-Oriented Real-Time Distributed Computing (ISORC'07)	10.1109/ISORC.2007.47	real-time computing;simulation;computer science;distributed computing;distributed control system;finite-state machine	Embedded	-11.178526984401323	26.936541938030473	191207
ee467f251b4b81f5df18fde8719070722fc70a5e	fault identification in system-level diagnosis: a logic-based framework and an o(n 2\sqrt{τ}/{\log n}) algorithm	logical framework;formalization;condition necessaire suffisante;logic;diagnosability;identificacion sistema;detection defaut;diagnostic panne;system identification;necessary and sufficient condition;fault diagnostic;diagnostico pana;formalizacion;formalisation;diagnostiquabilite;deteccion imperfeccion;identification systeme;condicion necesaria suficiente;logique;logica;fault identification;defect detection	Much research has been devoted to system-level diagnosis—SLD. Two issues have been addressed. The first of these is diagnosability, i.e., provide necessary and sufficient conditions for a system of n units to be diagnosable provided that the number of faulty units does not exceed τ . The second is the design of fault identification algorithms, assuming that the system being considered is diagnosable. This paper focuses on the second of these concerns, discussing several algorithms of which the most efficient runs in O(n 2.5 ) . By considering a logical framework, this paper investigates the process of fault identification and proposes a fault identification algorithm which runs in O( n 2 \sqrt τ / \sqrt log  n ) , τ < n/2 .	algorithm;logical framework;sld resolution	Béchir el Ayeb	2001	Algorithmica	10.1007/s00453-001-0092-9	real-time computing;logical framework;system identification;computer science;artificial intelligence;mathematics;programming language;logic;algorithm	EDA	-8.79279585183545	27.132831910222702	191228
ddcdb89575508fc21484d465823a62b913d96837	automatic verification of real-time systems with discrete probability distributions	automaton complexity;automatic verification;systeme temps reel;automata no determinista;probabilistic automaton;complexite automate;non deterministic automaton;formal verification;informatique theorique;probability distribution;automate probabiliste;automate non deterministe;automata probabilista;complejidad automata;verification formelle;real time system;timed automata;sistema tiempo real;computer theory;real time systems;informatica teorica	We consider the timed automata model of [3], which allows the analysis of real-time systems expressed in terms of quantitative timing constraints. Traditional approaches to real-time system description express the model purely in terms of nondeterminism; however, we may wish to express the likelihood of the system making certain transitions. In this paper, we present a model for real-time systems augmented with discrete probability distributions. Furthermore, using the algorithm of [5] with fairness, we develop a model checking method for such models against temporal logic properties which can refer both to timing properties and probabilities, such as, with probability 0.6 or greater, the clock x remains below 5 until clock y exceeds 2.	real-time transcription	Marta Z. Kwiatkowska;Gethin Norman;Roberto Segala;Jeremy Sproston	1999		10.1007/3-540-48778-6_5	probability distribution;real-time operating system;formal verification;computer science;theoretical computer science;probabilistic automaton;programming language;algorithm;statistics	Logic	-10.1510441103671	26.16327279815539	191366
491ff411e7b21348a604a785ac2b9ecf7ab0e5e0	modelling and verification of mutual exclusion algorithms	uppaal;model checking;timed automata;atomic vs non atomic read write operations;mutual exclusion algorithms	This paper proposes modelling and exhaustive verification of mutual exclusion algorithms using timed automata (TA) and the popular UPPAAL toolbox. The proposal allows to check all the properties of a mutual exclusion algorithm also along the time dimension. Both the classic case of atomic read/write operations on memory cells and the non determinism of reading a memory cell during one or multiple write operations on it as it may occur in modern multi-port memories are considered. The approach is then applied to some algorithms proposed in the literature of which known properties are confirmed but also new ones are revealed.	algorithm;automata theory;automated theorem proving;memory cell (binary);model checking;mutual exclusion;read-modify-write;read-write memory;scalability;statistical model;timed automaton;uppaal	Franco Cicirelli;Libero Nigro	2016	2016 IEEE/ACM 20th International Symposium on Distributed Simulation and Real Time Applications (DS-RT)	10.1109/DS-RT.2016.16	computer science;theoretical computer science;distributed computing;algorithm	Embedded	-11.310850280872314	26.203037723278854	192312
4de2cdf92e42ffa102883ec2c3829bbed107e356	optimizing the length of checking sequences	minimisation;test minimisation finite state machine test sequence optimization algorithm checking sequence generation algorithm;minimization;protocols;computer society;distinguishing sequence finite state machine checking sequence test minimization;optimization algorithm;formal specification;generic algorithm;test minimisation;system under test;indexing terms;automata;finite state machines;research paper;formal verification;specification languages;character generation;finite state machines software requirements and specifications minimization methods;joining processes;checking sequence;minimisation finite state machines formal specification formal verification;system testing;circuit testing;distinguishing sequence;communication system control;optimal algorithm;test sequence;finite state machine;checking sequence generation algorithm;test minimization	A checking sequence, generated from a finite state machine, is a test sequence that is guaranteed to lead to a failure if the system under test is faulty and has no more states than the specification. The problem of generating a checking sequence for a finite state machine M is simplified if M has a distinguishing sequence: an input sequence D~ with the property that the output sequence produced by M in response to D is different for the different states of M. Previous work has shown that, where a distinguishing sequence is known, an efficient checking sequence can be produced from the elements of a set A of sequences that verify the distinguishing sequence used and the elements of a set /spl gamma/ of subsequences that test the individual transitions by following each transition t by the distinguishing sequence that verifies the final state of t. In this previous work, A is a predefined set and /spl gamma/ is defined in terms of A. The checking sequence is produced by connecting the elements of /spl gamma/ and A to form a single sequence, using a predefined acyclic set E/sub c/ of transitions. An optimization algorithm is used in order to produce the shortest such checking sequence that can be generated on the basis of the given A and E/sub c/. However, this previous work did not state how the sets A and E/sub c/ should be chosen. This paper investigates the problem of finding appropriate A and E/sub c/ to be used in checking sequence generation. We show how a set A may be chosen so that it minimizes the sum of the lengths of the sequences to be combined. Further, we show that the optimization step, in the checking sequence generation algorithm, may be adapted so that it generates the optimal E/sub c/. Experiments are used to evaluate the proposed method.	algorithm;directed acyclic graph;finite-state machine;mathematical optimization;optimizing compiler;system under test	Robert Mark Hierons;Hasan Ural	2006	IEEE Transactions on Computers	10.1109/TC.2006.80	communications protocol;minimisation;discrete mathematics;genetic algorithm;index term;formal verification;computer science;theoretical computer science;complete sequence;formal specification;pseudorandom binary sequence;mathematics;automaton;system under test;finite-state machine;programming language;system testing;algorithm	Logic	-10.58895607300503	30.524489723620622	192704
ed9340861a212b7fd630ffadbc25579ab44cae3e	supervisor optimization for deadlock resolution in automated manufacturing systems with petri nets	manufacturing systems;cycle time;automated manufacturing systems;supervisory control;constraint optimization;costing;general mutual exclusion constraint;petri nets mathematical programming manufacturing systems optimization supervisory control;system cycle time utilization supervisor optimization automated manufacturing systems petri nets deadlock resolution supervisor synthesis process cost control cost effective supervisor mathematical programming;mutual exclusion;time petri net;supervisory control automated manufacturing systems general mutual exclusion constraint optimization petri nets;mathematical programming;industrial control;sensors and actuators;mathematical model;cost effectiveness;optimization;numerical experiment;petri nets;scada systems;petri net;scada systems cost optimal control costing industrial control manufacturing systems mathematical programming petri nets;manufacturing system;cost optimal control	For automated manufacturing systems (AMSs), deadlock resolution in terms of Petri nets remains an attractive topic to which many approaches are dedicated. However, few of them can quantitatively optimize certain indices during their supervisor synthesis process. This causes unnecessary control limitations and often leads to high implementation cost. In the framework of Petri nets, this paper proposes a method to synthesize a cost-effective supervisor with the aid of a set of mathematical programming formulations. Along the same vein, we also show some results by investigating timed Petri nets, which can be utilized to make a good tradeoff between implementation cost and system cycle time. Examples are used to validate the effectiveness of our result.	automation;computation;deadlock;mathematical optimization;online and offline;petri net;throughput;vhdl-ams	Hesuan Hu;Mengchu Zhou;Zhiwu Li	2011	IEEE Transactions on Automation Science and Engineering	10.1109/TASE.2011.2156783	control engineering;mathematical optimization;constrained optimization;real-time computing;computer science;engineering;mathematics;process architecture;petri net	Robotics	-6.572410726473453	29.375626598661842	192771
29a802468c8ddb700d4f3d2e34beb6cdbfd15d80	metric temporal logic with durations	systeme temps reel;metric temporal logic;logica temporal;temporal logic;axiomatic;semantics;metric;continuous system;semantica;semantique;specification language;systeme continu;temps calcul;axiomatico;duration calculus;sistema continuo;transition systems;metrico;real time system;lenguaje especificacion;sistema tiempo real;tiempo computacion;computation time;axiomatique;langage specification;logique temporelle;metrique;real time systems	We present a formal framework based on metric temporal logic (MTL) for specifying and verifying real-time systems with a continuous environment. Metric temporal logic is extended to allow speciication of properties about duration of system's states. We prove that every formula of the duration calculus (DC) can be translated into an equivalent MTL-R formula. Expressiveness of DC and MTL-R are compared. We formulate axioms for MTL-R and a sound rule for proving duration properties of timed transition systems.	duration calculus;formal specification;real-time clock;real-time computing;temporal logic;verification and validation	Yassine Lakhnech;Jozef Hooman	1995	Theor. Comput. Sci.	10.1016/0304-3975(94)00151-8	duration calculus;linear temporal logic;specification language;metric;temporal logic;interval temporal logic;computer science;artificial intelligence;mathematics;semantics;axiom;programming language;algorithm	Logic	-9.85961045990038	25.91692511456726	192848
2ff3769cface43871f09edf21194d6c721d8713c	an efficient algorithm for the solution of hierarchical networks of constraints	efficient algorithm;software systems;hierarchical networks;large classes;scene analysis	Networks of constraints are a simple model, useful for describing large classes of problems in picture recognition and scene analysis, in the representation of physical systems and in the specification of software systems. We consider particular classes of networks of constraints called hierarchical networks. A class of hierarchical networks is included in the language generated by a context free, hyperarc rewriting grammar. For such classes of networks, an efficient solution algorithm is given. The sequential version of the algorithm has a time complexity which is linear in the size of the given network, while the parallel version is logarithmic, provided that the syntactic tree is balanced. Our restriction to hierarchical networks of constraints is not critical; in fact such networks occur often in practice since they are naturally generated by decomposition system design methods.	algorithm;network topology;rewriting;software system;systems design;time complexity;tree (data structure);tree network	Ugo Montanari;Francesca Rossi	1986		10.1007/3-540-18771-5_69	mathematical optimization;theoretical computer science;machine learning;hierarchical network model;girvan–newman algorithm;hierarchical clustering of networks	ML	-5.0136859765922885	25.737530263559623	193072
467339a927f011391c50a927b78d4d7b59746a57	planning in nondeterministic domains under partial observability via symbolic model checking	conditional plan;observable domain;exponential blow;novel approach;non-deterministic domain;partial observability;art planner;initial condition;and-or graph;symbolic model checking;challenging planning problem;nondeterministic domain;search space	Planning under partial observability is one of the most significant and challenging planning problems. It has been shown to be hard, both theoretically and experimentally. In this paper, we present a novel approach to the problem of planning under partial observability in non-deterministic domains. We propose an algorithm that searches through a (possibly cyclic) and-or graph induced by the domain. The algorithm generates conditional plans that are guaranteed to achieve the goal despite of the uncertainty in the initial condition, the uncertain effects of actions, and the partial observability of the domain. We implement the algorithm by means ofBDD-based, symbolic model checking techniques, in order to tackle in practice the exponential blow up of the search space. We show experimentally that our approach is practical by evaluating the planner with a set of problems taken from the literature and comparing it with other state of the art planners for partially observable domains.	algorithm;experiment;initial condition;model checking;partially observable system;time complexity	Piergiorgio Bertoli;Alessandro Cimatti;Marco Roveri;Paolo Traverso	2001			model checking;mathematical optimization;combinatorics;discrete mathematics;symbolic trajectory evaluation	AI	-11.265231982186744	27.96840295857843	193400
114c133735f470e01b66d580fc4f6d7b8ea83bd0	achieving distributed control through model checking	global constraint;model checking;concurrent systems;distributed control	We apply model checking of knowledge properties to the design of distributed controllers that enforce global constraints on concurrent systems We calculate when processes can decide, autonomously, to take or block an action so that the global constraint will not be violated When the separate processes cannot make this decision alone, it may be possible to temporarily coordinate several processes in order to achieve sufficient knowledge jointly and make combined decisions Since the overhead induced by such coordinations is important, we strive to minimize their number, again using model checking We show how this framework is applied to the design of controllers that guarantee a priority policy among transitions.	distributed control system;model checking	Susanne Graf;Doron A. Peled;Sophie Quinton	2010		10.1007/978-3-642-14295-6_35	model checking;real-time computing;computer science;distributed computing;programming language;algorithm	Logic	-6.704991545992185	29.638427272206975	193661
44673f2a59443809f101c9c1ceedf2f53fc652cb	supervisor synthesis to satisfy safety and reachability requirements in chemical process control		A specification expressed in computation tree logic (CTL) that enforces safety and reachability requirements in discrete event systems is proposed. It is shown that the specification has a unique minimal control strategy that maximizes the set of states that satisfy the specification, and an algorithm is provided to calculate the control strategy. The specification captures the idea that the chemical process should always be able to shut down in a safe manner. The algorithm uses established CTL model checking procedures to perform the intermediate calculations, and can incorporate symbolic model checking. The maximum problem size for which a control strategy can be calculated is similar to that of the corresponding verification problem. A small example demonstrates the application of the algorithm to a problem that includes safety and reachability constraints. Current work aims to use the techniques to solve a real process control problem supplied by industry.	reachability;requirement	Blake C. Rawlings;Ben Christenson;John M. Wassick;B. Erik Ydstie	2014		10.3182/20140514-3-FR-4046.00127	reliability engineering;real-time computing;computer science;algorithm	Logic	-7.491717276042913	29.035697571369127	193919
14bc04e7c130b2f4f2367c4fef790a7f59720bfc	critical stages and their application in large scale automated manufacturing systems via petri nets	automated manufacturing systems;liveness enforcing supervision;petri nets;supervisor synthesis;distributed control	It often takes much time and effort to synthesize the supervisory controller given an automated manufacturing system (AMS). Any modification may lead to another synthesis procedure from the scratch. This work is motivated by the problem of distributed supervisor synthesis for complex large scale models of real systems. Existing approaches generally require the enumeration of all the states or siphons. Based on them, a centralized supervisor can be synthesized to perform on-line control. In this paper, we provide an on-line and realtime predictive control solution in order to significantly mitigate the computational burden and reduce the supervisor size. Our approach can minimize the communication amount among different processes, tolerate many contingencies like resource failure and improve system performance like throughput. These promote its applicability to many practical large scale systems. The supervisor synthesis procedure can also be adapted to other event-driven systems like warehouse, transportation, and logistics systems, which require a distributed and networked supervisor.	algorithm;automation;centralized computing;deadlock;distributed control system;event-driven programming;item unique identification;logistics;maximal set;online and offline;petri net;throughput;trusted data format;vhdl-ams;verilog-ams	Hesuan Hu;Yan Yang;Yang Liu;Nan Du	2016	2016 European Control Conference (ECC)	10.1109/ECC.2016.7810640	control engineering;real-time computing;engineering;operations management	Robotics	-6.188754969171668	29.40142911351493	193922
68f57e44bba7cb432be2aa11da635600baedc26c	memory efficient data structures for explicit verification of timed systems		Timed analysis of real-time systems can be performed using continuous (symbolic) or discrete (explicit) techniques. The explicit state-space exploration can be considerably faster for models with moderately small constants, however, at the expense of high memory consumption. In the setting of timed-arc Petri nets, we explore new data structures for lowering the used memory: PTries for efficient storing of configurations and time darts for semi-symbolic description of the statespace. Both methods are implemented as a part of the tool TAPAAL and the experiments document at least one order of magnitude of memory savings while preserving comparable verification times.	data structure;experiment;high memory;marginal model;model checking;newton's method;open-source software;overhead (computing);petri net;real-time computing;real-time locating system;semiconductor industry;state space;tapaal	Peter Gjøl Jensen;Kim G. Larsen;Jirí Srba;Mathias Grund Sørensen;Jakob Haahr Taankvist	2014		10.1007/978-3-319-06200-6_26	aerospace engineering;computer science;systems engineering;computer engineering	Logic	-10.157877136882757	29.59999395160514	193938
f2b256ba616f084fb589463cd9f34fec4478b3d6	principles and practice of constraint programming	constraint programming	s of Invited Talks Potential Applications of CP in Industrial Scheduling Srinivas Bollapragada General Electric Global Research Center, USA bollapragada@research.ge.com Abstract. Scheduling and planning algorithms have the potential to realize significant gains in key industrial sectors such as rail, aviation, power, oil & gas, and healthcare. Improving system level efficiencies even by one percent can save billions of dollars per year in each of these sectors. For example, increasing the average speed of trains by one mile per hour saves the rail industry $2.5 billion per year. This talk will describe some of our optimization algorithms based industrial applications that saved hundreds of millions of dollars for our customers. Scheduling and planning algorithms have the potential to realize significant gains in key industrial sectors such as rail, aviation, power, oil & gas, and healthcare. Improving system level efficiencies even by one percent can save billions of dollars per year in each of these sectors. For example, increasing the average speed of trains by one mile per hour saves the rail industry $2.5 billion per year. This talk will describe some of our optimization algorithms based industrial applications that saved hundreds of millions of dollars for our customers. Towards the Holy Grail in Machine Learning	algorithm;constraint programming;machine learning;mathematical optimization;scheduling (computing)	Graeme Gange;Peter J. Stuckey	2018		10.1007/978-3-319-98334-9	constraint programming;programming domain;reactive programming;functional reactive programming;computer science;theoretical computer science;extensible programming;programming paradigm;procedural programming;symbolic programming;inductive programming;fifth-generation programming language;programming language theory;algorithm;concurrent object-oriented programming	ML	-6.041626117838401	32.12221891436473	194016
971c5f1aec41b79d4e27d2060ba77aceb6aa5193	importance sampling of interval markov chains		In real-world systems, rare events often characterize critical situations like the probability that a system fails within some time bound and they are used to model some potentially harmful scenarios in dependability of safety-critical systems. Probabilistic Model Checking has been used to verify dependability properties in various types of systems but is limited by the state space explosion problem. An alternative is the recourse to Statistical Model Checking (SMC) that relies on Monte Carlo simulations and provides estimates within predefined error and confidence bounds. However, rare properties require a large number of simulations before occurring at least once. To tackle the problem, Importance Sampling, a rare event simulation technique, has been proposed in SMC for different types of probabilistic systems. Importance Sampling requires the full knowledge of probabilistic measure of the system, e.g. Markov chains. In practice, however, we often have models with some uncertainty, e.g., Interval Markov Chains. In this work, we propose a method to apply importance sampling to Interval Markov Chains. We show promising results in applying our method to multiple case studies.	dependability;extreme value theory;gibbs sampling;importance sampling;markov chain;model checking;monte carlo method;rare events;sampling (signal processing);simulation;state space;statistical model;world-system	Cyrille Jégourel;Jingyi Wang;Jun Sun	2018	2018 48th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)	10.1109/DSN.2018.00040	model checking;importance sampling;mathematical optimization;monte carlo method;state space;probabilistic logic;computer science;distributed computing;statistical model;markov process;markov chain	SE	-11.091595888987593	28.596057482902793	194082
acfac9ed8e183d1b60d2531e68ea5fce1c5cea28	synthesizing synchronous systems by static scheduling in space-time	these;tratamiento paralelo;red sistolica;protocole transmission;traitement parallele;sistema informatico;transmission message;computer system;space time;tesis;message transmission;synchronous system;protocolo transmision;synchronism;thesis;systolic network;synchronisme;sincronismo;gestion transmission;communications managing;reseau systolique;systeme informatique;gestion transmision;parallel processing;transmision mensaje;transmission protocol	Bargaining with reading habit is no need. Reading is not kind of something sold that you can take or not. It is a thing that will change your life to life better. It is the thing that will give you many things around the world and this universe, in the real world and here after. As what will be given by this synthesizing synchronous systems by static scheduling in space time, how can you bargain with the thing that has many benefits for you?	bargain buddy;schedule (computer science);scheduling (computing)	Björn Lisper	1989		10.1007/3-540-51156-3	embedded system;parallel processing;real-time computing;telecommunications;computer science;space time	AI	-7.739833954126028	31.60919738256817	194324
74c410ec48af7adf520c7ba39c231b01d2511619	control program design for automated guided vehicle systems via petri nets	programmable logical controller automated guided vehicle discrete event systems petri nets;control systems;programmable controllers automatic guided vehicles boolean functions closed loop systems collision avoidance control system synthesis mobile robots petri nets;boolean expressions;radiation detectors;programmable logical controller plc;programmable logical controller;ladder diagram automated guided vehicle systems ordinary petri net based approach ordinary pn based approach programmable logical controller plc automated guided vehicle system agv system pn supervisor closed loop pn collision prevention control hardware pn boolean expressions;coils;control program;期刊论文;ladder diagram;closed loop;radiation detectors vehicles wiring control systems coils algorithm design and analysis;vehicles;wiring;algorithm design and analysis;automated guided vehicle system;automated guided vehicles	An ordinary Petri-net (PN) based approach is proposed to design a programmable logical controller (PLC) that prevents collisions among vehicles in an automated guided vehicle (AGV) system. First, a procedure is proposed to model an AGV system as a control-hardware PN. Second, a method is formulated to design a PN supervisor (the closed-loop PN) for collision prevention. This paper defines the line, merge, divide and intersection alignments, and then adds the transitions and arcs for these four alignments into the control-hardware PN, respectively. As a result, a closed-loop PN is obtained as the supervisor for preventing collisions among vehicles in an AGV system. Finally, a method is introduced to automatically translate a closed-loop PN into a ladder diagram by Boolean expressions. Consequently, the closed-loop PN can be implemented by a PLC. An example is used to illustrate this methodology.	arcs (computing);algorithm;boolean expression;control engineering;debugging;diagram;ladder logic;petri net;switch;tip (unix utility);wiring	Jiliang Luo;Huijuan Ni;Mengchu Zhou	2015	IEEE Transactions on Systems, Man, and Cybernetics: Systems	10.1109/TSMC.2014.2342199	embedded system;algorithm design;real-time computing;boolean expression;computer science;control system;ladder logic;control theory;particle detector	Robotics	-5.450277258541184	28.8274774766928	195180
9339a48b796b74333183b600bb90d30f559aa575	implementing a multiple specification regulation controller: a case of study	manufacturing systems;model specification;efficient algorithm;regulation control;discrete event system multiple specification regulation controller advanced manufacturing cell decision making machine global controller interpreted petri net;industrial control;discrete event systems;discrete event systems petri nets industrial control manufacturing systems;manufacturing cells;petri nets;discrete event;computer aided software engineering supervisory control petri nets usa councils intelligent robots pulp manufacturing virtual manufacturing decision making optimal control formal languages	This paper presents the implementation of a controller for an advanced manufacturing cell (MC) that uses a decision making machine to track several model specifications. It follows an incremental approach, where the individual controllers (which are designed for isolated specifications) are used to obtain the global controller. The global controller is the combination of all specifications working in concurrence. Such concurrence/combinatory approach leads to efficient algorithms and computation towards optimal performance of the global controller.	algorithm;cell (microprocessor);computation;controller (computing)	Raul Campos-Rodriguez;Pritpal Dang;José Mireles;Frank L. Lewis	2004	2004 IEEE International Conference on Systems, Man and Cybernetics (IEEE Cat. No.04CH37583)	10.1109/ICSMC.2004.1399929	real-time computing;petri net;specification;statistics	Robotics	-5.502929861583888	28.665050867557632	195718
225df0be21f6e7bbe0b674739edbaa62c116e633	general observation structures for petri nets	adaptive labeled petri nets general observation structures transition firing static labels measurable place marking;petri nets;petri nets sensors labeling adaptation models mathematical model educational institutions discrete event systems	Observation structures usually considered for Petri nets assume that the firing of transitions may be observed through static labels and that the marking of some places may be measurable. These observation structures are rather limited and we consider in this paper more general ones, correspondingly defining two new classes of nets: labeled Petri nets with outputs and adaptive labeled Petri nets. Several examples of nets in these classes are considered. Furthermore we also show the possibility to convert a labeled Petri net into an adaptive Petri net or a labeled Petri net.	algorithm;item unique identification;petri net	Yin Tong;Zhiwu Li;Alessandro Giua	2013	2013 IEEE 18th Conference on Emerging Technologies & Factory Automation (ETFA)	10.1109/ETFA.2013.6648161	stochastic petri net;computer science;artificial intelligence;process architecture;petri net;algorithm	EDA	-5.690574251916604	27.717357168535084	195766
06a2cff2a88fe18af17fbe326fa7fe033b97f543	exploiting colored petri nets to decide on permutation admissibility	software tool;permutation admissibility;multistage interconnection network;colored petri net;petri net;article	In this work, we propose an innovative approach to investigate the admissibility of permutations to multistage interconnection networks—a challenging problem of switching theory. The proposed approach is centered upon modeling of multistage interconnection networks with colored Petri nets and use of Petri net analysis tools such as the unfolding technique and the invariants method. To assess the feasibility of the proposed approach we demonstrate that the complete unfoldings obtained in this work are polynomial in the problem size and employ an acyclic structure. The approach takes advantage of easy to use, yet extremely efficient, software tools.	admissible heuristic;analysis of algorithms;cp/m;computer experiment;directed acyclic graph;fault tolerance;invariant (computer science);mathematical optimization;multistage interconnection networks;petri net;polynomial;state space;switching circuit theory;unfolding (dsp implementation)	Rza Bashirov;Fabrice Kordon;Hüseyin Lort	2008	Acta Informatica	10.1007/s00236-008-0084-1	discrete mathematics;stochastic petri net;computer science;distributed computing;petri net;algorithm	SE	-7.11727258947062	28.391971587963393	196137
0460db43658063dd642073835c717e6e6f8ff7f1	deductive probabilistic verification methods of safety, liveness and nonzenoness for distributed real-time systems	developpement logiciel;systeme temps reel;modelizacion;distributed system;verificacion modelo;systeme reparti;logica temporal;sistema transicion probabilista;calculateur embarque;temporal logic;computer model;real time;temps lineaire;vivacidad;verification modele;automate temporise;probabilistic approach;tiempo lineal;program verification;systeme transition probabiliste;vivacite;automata contemporizado;modelisation;verificacion programa;sistema repartido;model checking;distributed real time system;linear temporal logic;desarrollo logicial;enfoque probabilista;approche probabiliste;temps reel;linear time;software development;boarded computer;transition systems;liveness;tiempo real;probabilistic transition system;real time system;timed automata;sistema tiempo real;probabilistic logic;verification programme;logique probabiliste;modeling;calculador embarque;logique temporelle	Recently, model-checking and probabilistic timed simulation verification methods of probabilistic timed automata have been developed. In this paper, we propose probabilistic timed transition systems by generalizing probabilistic timed automata, and propose deductive verification rules of probabilistic real-time linear temporal logic over probabilistic timed transition systems. As our proposed probabilistic timed transition system is a general computational model, we have developed general verification methods.		Satoshi Yamane	2005		10.1007/11599555_33	time complexity;model checking;probabilistic analysis of algorithms;linear temporal logic;real-time computing;real-time operating system;probabilistic ctl;systems modeling;temporal logic;computer science;artificial intelligence;software development;probabilistic logic;probabilistic argumentation;algorithm;liveness	Logic	-9.569043632884904	26.503644319008725	196521
84cb2d08df0db023d63d1373c4f9a6a7e959e730	modelling integer linear programs with petri nets	integer linear programming;petri nets;petri net;integer linear program	We show in this paper that timed Petri nets, with one resource shared by all the transitions, are directly connected to the modelling of integer linear programs (ILP). To an ÎLP can be automatically associated an equivalent Petri net. The optimal reachability delay is an optimal solution of the ILP. We show next that a net can model any ILP. I order to do this, we give a new sufficient reachability condition for the marking équation, which also holds for gênerai Petri nets without timed transitions.	item unique identification;linear programming;petri net;reachability	Pascal Richard	2000	RAIRO - Operations Research	10.1051/ro:2000115	mathematical optimization;discrete mathematics;integer programming;stochastic petri net;computer science;mathematics;petri net	Logic	-6.891519236068814	28.773483123151212	197573
e616b745d330b0d838ede103f749d2bf33d78759	a new temporal logic ctl[k-qddc] and its verification	software;real time distributed software;continuous time;quantitative model checking branching past;complexity theory;branching past;temporal logic;real time distributed hardware systems;real time;discrete time;complex logics temporal logic logic quantified discrete time duration calculus bounded model checking real time distributed software real time distributed hardware systems;complex logics;expressive power;bounded model checking;computational modeling;quantitative;duration calculus;model checking;specification and verification;temporal logic formal logic;temporal properties;formal logic;software algorithms;computational modeling algorithm design and analysis complexity theory software algorithms software real time systems programming;programming;algorithm design and analysis;logic quantified discrete time duration calculus;real time systems	We define a new temporal logic called CTL[k-QDDC]. It extends CTL with the ability to specify branching pasts and quantitative temporal properties by combining CTL with the logic Quantified Discrete-time Duration Calculus (QDDC). The idea of bounded model checking is also used in this logic. Compared to CTL, the added expressive power is necessary for specification and verification of real-time distributed software and hardware systems. We give the syntax and semantics of CTL[k-QDDC], discuss its expressive power, and propose an explicit model checking algorithm for Kripke structure. CTL[k-QDDC] is considered as a foundation of some more complex logics for specifying and verifying continuous-time properties in some appropriate structures.	algorithm;distributed computing;duration calculus;expressive power (computer science);formal specification;kripke structure (model checking);model checking;real-time transcription;temporal logic;verification and validation	Jiaqi Zhu;Hanpin Wang;Zhongyuan Xu	2008	2008 32nd Annual IEEE International Computer Software and Applications Conference	10.1109/COMPSAC.2008.53	model checking;algorithm design;duration calculus;programming;discrete time and continuous time;linear temporal logic;probabilistic ctl;temporal logic;computation tree logic;computer science;theoretical computer science;ctl*;programming language;computational model;logic;expressive power;algorithm	Logic	-11.796281664438121	25.98503101415912	198113
eff6304148e6014b7d1f6661998e974528217fbc	oris: a tool for modeling, verification and evaluation of real-time systems	model verification;modelizacion;distributed system;integrated approach;timed systems;analisis cualitativo;analyse symbolique;enumeration;systeme reparti;preemptive scheduling;sistema temporizado;enumeracion;red petri;analisis simbolico;analisis cuantitativo;real time;preempcion;timed system;qualitative analysis;analyse temporelle;probabilistic approach;program verification;schedulability analysis;analisis temporal;time analysis;sistema reactivo;modelisation;verificacion programa;qualitative verification;time petri net;difference bounds matrix;sistema repartido;analyse qualitative;state space method;analyse quantitative;methode espace etat;symbolic state space enumeration;scheduling;enfoque probabilista;approche probabiliste;state space;temps reel;reactive system;preemption;systeme temporise;systeme reactif;quantitative analysis;tiempo real;time petri nets;symbolic analysis;verification programme;petri net;modeling;preemptive time petri nets;ordonnancement;quantitative evaluation;reseau petri;reglamento;metodo espacio estado;modeling and analysis;real time systems;stochastic time petri nets	Oris is a tool for qualitative verification and quantitative evaluation of reactive timed systems, which supports modeling and analysis of various classes of timed extensions of Petri Nets. As most characterizing features, Oris implements symbolic state space analysis of preemptive Time Petri Nets, which enable schedulability analysis of real-time systems running under priority preemptive scheduling; and stochastic Time Petri Nets, which enable an integrated approach to qualitative verification and quantitative evaluation. In this paper, we present the current version of the tool and we illustrate its application to two different case studies in the areas of qualitative verification and quantitative evaluation, respectively.	complex systems;formal specification;galileo (satellite navigation);machine translation;petri net;preemption (computing);rtai;real-time clock;real-time computing;real-time transcription;scheduling (computing);scheduling analysis real-time systems;semiconductor industry;shattered world;software framework;state space;stochastic process;test case	Giacomo Bucci;Laura Carnevali;Lorenzo Ridi;Enrico Vicario	2010	International Journal on Software Tools for Technology Transfer	10.1007/s10009-010-0156-8	real-time computing;computer science;artificial intelligence;preemption;algorithm	Embedded	-9.543457201135858	26.779359202015502	198565
a5618e7659afc6649ea076010ef0faedd94f0cc9	quasi-static scheduling of communicating tasks	processus ponctuel;systeme commande;sistema control;medio ambiente;tree;gestion labor;05bxx;05c05;red petri;point to point;qa mathematics;real time;arbol;branching;influencia;coaccion;point process;task model;contrainte;ressource;response;quasi static scheduling;communicating machines;metodo secuencial;calculo automatico;sequential method;computing;calcul automatique;upper bound;influence;control system;constraint;gestion tâche;message sequence chart;data dependence;informatique theorique;scheduling;ramificacion;environment;temps reel;channel bound;flot commande;control flow;decision;arbre;methode sequentielle;proceso puntual;scheduling problem;tiempo real;ramification;reponse;environnement;decidibilidad;respuesta;flujo control;task scheduling;borne superieure;decidabilite;petri net;buffer capacity;recurso;ordonnancement;reseau petri;reglamento;processus sequentiel;hard real time;decidability;cota superior;computer theory;68m20;resource;informatica teorica	Good scheduling policies for distributed embedded applications are required for meeting hard real time constraints and for optimizing the use of computational resources. We study the quasi-static scheduling problem in which (uncontrollable) control flow branchings can influence scheduling decisions at run time. Our abstracted distributed task model consists of a network of sequential processes that communicate via point-to-point buffers. In each round, the task gets activated by a request from the environment. When the task has finished computing the required responses, it reaches a pre-determined configuration and is ready to receive a new request from the environment. For such systems, we prove that determining the existence of a scheduling policy that guarantees upper bounds on buffer capacities is undecidable. However, we show that the problem is decidable for the important subclass of ''data-branching'' systems in which control flow branchings are exclusively due to data-dependent internal choices made by the sequential components. This decidability result exploits ideas derived from the Karp and Miller coverability tree for Petri nets as well as the existential boundedness notion of languages of message sequence charts.	scheduling (computing)	Philippe Darondeau;Blaise Genest;P. S. Thiagarajan;Shaofa Yang	2010	Inf. Comput.	10.1016/j.ic.2009.09.005	decidability;fair-share scheduling;fixed-priority pre-emptive scheduling;computing;real-time computing;branching;dynamic priority scheduling;computer science;control system;point process;distributed computing;ramification;tree;constraint;control flow;scheduling;petri net;message sequence chart;algorithm;resource	Embedded	-7.6871347772264444	31.457605215631435	199114
d75cf1ab770c00edf79836cb776d827555b29e7a	synthesis of a class of deadlock-free petri nets	reseau regulier;reseau transmission donnee;synthese;synthesis;data transmission network;control structure;interblocage;petri net;reseau petri	A new class of Petri nets called regular nets is described. The structure of these nets guarantees liveness once the invanants are marked with tokens. Some graphical properties ofmvariants and variants are discussed. The concept of net labeling is introduced and a systematic method of synthesizing regular nets ts presented. It is shown how the safety of such nets can be trivially assured, thus producing live and safe control structures.	control flow;deadlock;graphical user interface;liveness;petri net	Ajoy Kumar Datta;Sukumar Ghosh	1984	J. ACM	10.1145/828.322441	computer science;programming language;control flow;petri net	Logic	-5.800825369863588	26.907724594575566	199921
