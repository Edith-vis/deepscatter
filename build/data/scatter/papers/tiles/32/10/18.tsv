id	title	keywords	abstract	entities	authors	year	journal	doi	fos	area	x	y	ix
e5921013ad93a47f89363162381d808ef50b8039	a runtime monitoring and validation framework for web service interactions	protocols;owl s;runtime monitoring web services protocols australia automata contracts service oriented architecture bridges software engineering;service composition;web service interactions;run time interaction behaviour monitoring;system monitoring;bridges;swinburne;contracts;web service;runtime;software engineering;service interaction protocols;knowledge representation languages;system monitoring conformance testing finite state machines internet knowledge representation languages open systems;automata;finite state machines;conformance checking web service interactions interoperability service composition service interaction protocols owl s service interaction constraints run time interaction behaviour monitoring finite state automata;conformance testing;internet;monitoring;finite state automata;web services;runtime monitoring;interaction protocol;conformance checking;interoperability;service oriented architecture;open systems;australia;service interaction constraints	Web services are designed for composition and use by third parties through dynamic discovery. As such, the issue of interoperability between services is of great importance to ensure that the services can work together towards the overall application goals. In particular, the interaction protocols of a service need to be implemented and used properly so that the service composition can conduct itself in an orderly fashion. In our previous work, we have proposed a lightweight, pattern/constraint-based approach to specifying service interaction protocols. It has been incorporated into OWL-S for service developers to describe service interaction constraints. In this paper, we present a framework for monitoring the run-time interaction behaviour of Web services and validating the behaviour against their pre-defined interaction constraints. The framework involves interception of service interactions/messages, representation of interaction constraints using finite state automata, and conformance checking of service interactions against interaction constraints. As such, the framework provides a useful tool for validating the implementation and use of services regarding their interaction behaviour	automata theory;conformance testing;finite-state machine;interaction protocol;interoperability;owl-s;service composability principle;web service	Zhijun Li;Yan Jin;Jun Han	2006	Australian Software Engineering Conference (ASWEC'06)	10.1109/ASWEC.2006.6	web service;computer science;service delivery framework;service design;database;distributed computing;service discovery;finite-state machine;law;world wide web	SE	-45.89581534866911	18.46599150853002	168359
a11922bd49e5072e124c791d0866d94ca9943f70	dsl for collaborative systems with awareness		Domain Specific Languages (DSLs) are high-level languages defined for combining expressiveness and simplicity by means of linguistic constructs which are close to the problem domain but independent of the complexities inherent to the underlying software implementations. This article presents the CSSL v2.0 language that allows defining in precise, concise and friendly manner the abstract concepts of collaborative systems. Specially, the language makes available the concepts of awareness and collaborative processes. The language is independent of both the framework and the development tools and allows the application of the MDD approach to the development of such systems. The CSSL v2.0 language was designed as a UML extension using the metamodeling mechanism and was implemented with open source tools on the Eclipse platform. It provides improvements on previous proposals by enabling more complete and complex specifications of collaborative situations.	awareness;collaborative software;digital subscriber line;domain-specific language;eclipse;high- and low-level;metamodeling;model-driven engineering;open-source software;problem domain;programming tool;unified modeling language	Luis Mariano Bibbo;Roxana Giandini;Claudia Pons	2017	2017 XLIII Latin American Computer Conference (CLEI)	10.1109/CLEI.2017.8226461	collaborative software;metamodeling;implementation;systems engineering;software design;software;problem domain;unified modeling language;domain-specific language;computer science	SE	-46.72986024272863	25.003635435707796	168521
c65d75560ce36b6dad9a0d7074fd834134188a49	pattern-based conceptual modeling of interaction with cyber physical systems		Supported by ubiquitous, pervasive and embedded computing, Cyber Physical Systems (CPS) support actors and groups by services anywhere and anytime. How users interact with CPS and the provided service is the key to success. To keep a holistic view of human-CPS interaction, we propose narratives, pattern-based diagrammatic conceptual models, and formalized conceptual models which are used for step-wise derivation of design models for distributed service infrastructures. Reusable design patterns for diagrammatic model are constructed for illustrating the human-CPS interaction processes. Finally, a use case is used to illustrate the implementation of the proposed method.		Junfeng Wang;Suihuai Yu;Ning Wang	2016	iJOE		embedded system;software design pattern;simulation;design methods;human–computer interaction;computer science;systems engineering;engineering;conceptual model;cyber-physical system	EDA	-46.06257588203276	21.498888438221513	168719
0feb1d59267fbe2f8cb58b6148f34ab0f843f5d5	canonsketch: a user-centered tool for canonical abstract prototyping	user interface;specification language;user interface specification;software development;user behavior;modeling tool	In this paper, we argue that current user interface modeling tools are developed using a formalism-centric approach that does not support the needs of modern software development. In order to solve this problem we need both usable and expressive notations and tools that enable the creation of userinterface specifications that leverage the design and thought process. In this paper we present the CanonSketch tool. CanonSketch supports a new UI specification language – Canonical Abstract Prototypes (CAP) – that bridges the gap between envisioned user behavior and the concrete user interface. The tool also supports two additional and synchronized views of the UI: the Wisdom UML presentation extension and concrete HTML user interfaces. In this way the tool seamlessly supports designers while switching from high level abstract views of the UI and low-level concrete realizations.	html;high- and low-level;high-level programming language;semantics (computer science);software development;specification language;unified modeling language;user interface modeling	Pedro F. Campos;Nuno Jardim Nunes	2004		10.1007/11431879_9	user interface design;user;user modeling;human–computer interaction;natural language user interface;computer science;systems engineering;natural user interface;user interface;engineering drawing	SE	-48.05199668686663	24.13045969468976	169077
8a3fdb6c5360bc66a6cfb72d36fee2bf9e1e4b8c	a formal composition and interaction model for a web component platform	formal model;life cycle;web service;software engineering;web services;web components;interaction model	A framework for components on the Web needs a formal model that captures essen tial concepts such as contractual information and service matching We propose a typed calculus based model for Web components that formalises an extension of the currently discussed Web Services framework We address in particular activities in the stages of a component life cycle such as matching commitment connection and interaction that are part of the process that a component is involved in	mathematical model;web components;web service;world wide web	Claus Pahl	2002	Electr. Notes Theor. Comput. Sci.	10.1016/S1571-0661(04)80450-X	web service;web development;web modeling;data web;web design;web standards;computer science;ws-policy;service-oriented architecture;social semantic web;ws-addressing;semantic web stack;database;web intelligence;world wide web	Web+IR	-45.838415246920874	18.39354527072516	169086
eb25f1b7899df384b4b77cbbed3dbb5c11b8c75c	simulator implementation of an inverse synthetic aperture radar system for an extended naval target in a three dimensional synthetic environment	analytical models;electromagnetic signature;radar remote sensing;design engineering;inverse synthetic aperture radar radar cross section computational modeling design engineering computer simulation context modeling mathematical model analytical models systems engineering and theory radar remote sensing;conceptual model;data exchange;extended target;three dimensional;simulator;systems engineering and theory;radar cross section;computational modeling;electromagnetic signature inverse synthetic aperture radar simulator extended target;inverse synthetic aperture radar;mathematical model;context modeling;computer simulation	The construction steps regarding a computer simulator implementation for an extended naval target as viewed by an ISAR system is presented in this paper. The analysis involves the build up of the associated conceptual model, the explanation of the applied modelling approach and the depiction of the utilised data exchange standard. Finally the verification, validation and quality focus issues of the simulator are discussed.	academy;bismarck;computer simulation;data mining;database;requirement;synthetic intelligence	Theodoros G. Kostis	2008	Tenth International Conference on Computer Modeling and Simulation (uksim 2008)	10.1109/UKSIM.2008.14	computer simulation;data exchange;three-dimensional space;computer vision;simulation;computer science;engineering;conceptual model;mathematical model;context model;inverse synthetic aperture radar;computational model;radar cross-section	DB	-44.49029796164185	24.058599005029446	169195
fbfeb20cef431f8c89b205b3ae69e8837116d46f	towards linking adaptation rules to the utility function for dynamic architectures	runtime;computer architecture;computational modeling;pattern matching;joining processes;adaptation models;context	To benefit from utility-driven and rule-based approaches to self-adaptation, we propose combining both by defining and linking the utility function and the adaptation rules in a pattern-based way at the architectural level.	logic programming;utility	Sona Ghahremani;Holger Giese;Thomas Vogel	2016	2016 IEEE 10th International Conference on Self-Adaptive and Self-Organizing Systems (SASO)	10.1109/SASO.2016.21	simulation;computer science;theoretical computer science;machine learning;pattern matching;programming language;computational model	Robotics	-45.555548034510494	19.281780467702355	169455
f58f80123b6b90ab91156ce7bc23e3871fdc83ea	organization-based agent-oriented programming: model, mechanisms, and language	role based interactions;and language;organization abstraction;agent;agent oriented programming;organization based programming;mechanisms;cuiyun hu xinjun mao mengjun li zhi zhu 面向agent 编程语言 机制 程序设计 分布式人工智能 组织 计算系统 多智能体系统 organization based agent oriented programming model;role enactment;agent agent oriented programming organization based programming role enactment role based interactions organization abstraction	An increasing number of social computational systems consist of a great amount of autonomous entities and operate in highly dynamic and unpredictable environments. To construct such systems needs to seek high-level abstraction to manage the complexity of the systems and novel mechanism to support their characteristics, i.e., dynamism and flexibility. Agent-oriented programming (AOP) is considered as a potential paradigm for developing such systems by exhibiting a number of characteristics, such as autonomy, flexibility, social ability, etc. However, current researches on AOP mainly focus on the construction of multi-agent system (MAS) with theory and language facilities inspired from artificial intelligence (AI) and distributed AI, seldom considering and integrating the proven principles and practices of programming and software engineering. Moreover, abstractions and mechanism based on AI are inadequate for developing dynamic and flexible MAS in open environment. This paper proposes a novel AOP approach, namely Oragent, for constructing and implementing dynamic and flexible systems. From a software engineering perspective, Oragent integrates organizational concepts and mechanism into AOP language, and support the dynamism and flexibility with explicit primitives. The proposed approach consists of a programming model and a corresponding programming language. This paper presents the syntax and formal operational semantics of Oragent language, and studies a case to demonstrate our approach.	apl;agent-oriented programming;autonomous robot;autonomy;code;comment (computer programming);compiler;complexity;computation;debugger;distributed artificial intelligence;encapsulation (networking);entity;entity–relationship model;feedback;high- and low-level;integrated development environment;jade;java;middleware;multi-agent system;online and offline;open system (computing);operational semantics;piaget's theory of cognitive development;programmer;programming language;programming model;requirement;software development;software engineering;software framework;transition system	Cuiyun Hu;XinJun Mao;Mengjun Li;Zhi Zhu	2013	Frontiers of Computer Science	10.1007/s11704-013-2345-6	programming domain;reactive programming;functional reactive programming;computer science;artificial intelligence;extensible programming;database;programming paradigm;symbolic programming;inductive programming;programming language;algorithm;concurrent object-oriented programming;law of agency	AI	-42.07573672534278	20.82494102430772	170779
172c65ec64654b9390aefbec4225f2fc3555364d	human behaviour modelling in complex socio-technical systems : an agent based approach	agent based modelling and simulation;human behaviour modelling;complex systems	ion Abstraction of  the  target  system and development of  the conceptual model  incorporating  the relevant aspects of the target system relevant to the study.ion of  the  target  system and development of  the conceptual model  incorporating  the relevant aspects of the target system relevant to the study.		Julie Dugdale	2013			simulation;engineering;knowledge management;management science	SE	-43.93341188944277	21.24698139986945	171218
0f8f89fcd3ec6ef23c059a53c450c1f3dc2a0692	distributed bayesian networks in highly dynamic agent organizations	distributed system;bayesian network;multi agent system;belief propagation;self organization	In this paper we focus on the problems associated with distributed approaches to exact belief propagation in multi agent systems. In particular, we discuss the Multiply Sectioned Bayesian networks (MSBN) and Distributed Perception Networks (DPNs). While MSBNs support modeling of more complex domains than DPNs, we argue that MSBN approach is not suitable for large and changing agent societies. DPNs, on the other hand, are a special class of MSBNs and have limited modeling capabilities. However, DPN approach facilitates selforganization of distributed systems and, consequently, can cope with variable agent societies.	bayesian network;belief propagation;compiler;distributed computing;problem domain;software propagation	Patrick de Oude;Jan Nunnink;Gregor Pavlin	2005			self-organization;computer science;machine learning;multi-agent system;bayesian network;data mining;distributed computing;belief propagation	AI	-41.251099963449406	20.505012107527826	171362
a6a8db891fd743301af3082131fa4e2a0ae6f2d4	proposal of voice control-based interactive design method of agent system	agent repository based multiagent framework voice control based interactive design method agent technologies nondeterministic characteristics situational characteristics agent system deployment process agent system design process;employment;protocols;multi agent systems;software agents audio user interfaces interactive systems multi agent systems;monitoring;organizations;multi agent systems employment organizations programming problem solving monitoring protocols;programming;problem solving	Agent systems have been designed and deployed using recent agent technologies. However, design and deployment of these systems remain as difficult tasks of developers because agents have situational and nondeterministic characteristics and because any useful design and deployment support facilities have not been provided for developers. To raise the efficiency of the agent system design and deployment process, we propose a voice control-based interactive design method of agent system founded on an agent-repository-based multiagent framework.	agent-based model;interactive design;nondeterministic algorithm;software agent;software deployment;speaker recognition;systems design;voice command device	Takahiro Uchiya;Daisuke Yamamoto;Ryota Nishimura;Ichi Takumi;Tetsuo Kinoshita	2014	2014 IEEE 13th International Conference on Cognitive Informatics and Cognitive Computing	10.1109/ICCI-CC.2014.6921505	simulation;systems engineering;engineering;knowledge management;autonomous agent;intelligent agent;agent-based social simulation	Robotics	-41.537370257126376	20.87136295486496	173523
154b52870240f524fdfd605b701791cc030dcf9b	enriching model-based web applications presentation	web engineering;web 2 0;rich internet applications;user interfaces;web ui evolution	The Web Engineering community provides Web Models that allow the design and development of Web 1.0 applications. Nowadays, there are a growing number of Web 1.0 applications that are migrating towards Web 2.0 User Interfaces, in search of multimedia support and higher levels of interaction among other features. These Web 2.0 features can be implemented using RIA technologies. However, most of the current Web Models do not fully exploit all the potential benefits of Rich Internet Applications. Therefore it is difficult for developers to adapt Web 1.0 applications to Web 2.0 using a methodology. Although there are interesting works that extend existing methodologies to deal with RIA features, either they do not fully exploit presentation issues or they only work with a single Web methodology. In this paper we use RUX-Method to facilitate the evolution of existing Web 1.0 applications based on Web Models to multidevice Web 2.0 applications. RUX-Method focuses on the enrichment of the User Interface while takes full advantage of the functionality already provided by the existing Web models. Far from explaining RUX-Method in detail, this paper focuses on the way the information provided by Web Models is retrieved and then used by RUX-Method.	web application	Juan Carlos Preciado;Marino Linaje Trigueros	2008	J. Web Eng.		web service;web application security;web development;web modeling;rich internet application;data web;web mapping;web-based simulation;web design;human–computer interaction;web accessibility initiative;web standards;computer science;web navigation;social semantic web;web page;database;multimedia;web intelligence;web engineering;user interface;web 2.0;world wide web;mashup	Web+IR	-48.26123737680993	21.109745558720565	173976
0ac920516b6231ac0b399f4f1ffc35815054ff8e	towards agent-mediated knowledge management	agent based;software agent;knowledge management	In this paper, we outline the relation between Knowledge Management (KM) as an application area on the one hand, and software agents as a basic technology for supporting KM on the other. We start by presenting characteristics of KM which account for some drawbacks of today’s – typically centralized – technological approaches for KM. We argue that the basic features of agents (social ability, autonomy, reand proactiveness) can alleviate several of these drawbacks. A classification schema for the description of agent-based KM systems is established, and a couple of example systems are depicted in terms of this schema. The paper concludes with questions which we think research in Agentmediated Knowledge Management (AMKM) should deal with.	agent-based model;agile software development;autonomy;business process;centralized computing;extensibility;fathom;imperative programming;information system;intelligent agent;interaction;knowledge management;legacy system;microsoft outlook for mac;middleware;openness;proactive parallel suite;problem solving;scalability;software agent;software prototyping;video synopsis;wicked	Ludger van Elst;Virginia Dignum;Andreas Abecker	2003		10.1007/978-3-540-24612-1_1	knowledge management;intelligent agent	AI	-44.5413217684436	19.53489825970707	174679
8b85ff7225f62c1edecda78398035d8b8e2ac9b6	t□: a domain specific language for rapid workflow development	model driven engineering;domain specific language;workflow management system;ontology	In MDE, software systems are always synchronized with their models since changes are made first to the model whenever there are changes in the requirement specifications. While MDE has a lot of potential, it requires maturity and tool support. In this research we present a framework for a workflow management system based on the MDE approach. We propose a domain specific language, T□ (T-Square) for rapidly specifying details of (workflow) tasks and their associated user interfaces which may be used with the NOVA Workflow, an executable workflow management system. T□ includes syntax for writing procedural statements, for querying an ontology, for declaring user interfaces, for applying access control policy, and for scheduling tasks, using Xtext to write the grammar. We apply transformation methods, based on Xtend, to generate executable software from the abstract task specifications. A running example from health services delivery illustrates the usefulness of this approach.	access control;android;application programming interface;capability maturity model;client (computing);domain model;domain-specific language;eclipse xtext;executable;mobile device;model-driven engineering;relational database;requirement;scalability;scheduling (computing);software system;system analysis;t-square;user interface;user requirements document;web service;world wide web;ipad	Fazle Rabbi;Wendy MacCaull	2012		10.1007/978-3-642-33666-9_4	workflow;model-driven architecture;xpdl;computer science;systems engineering;domain-specific language;software engineering;ontology;database;windows workflow foundation;programming language;workflow management system;workflow engine;workflow technology	SE	-47.65577081104841	23.276101274236687	175159
9f172d0548acff81635c292580d0f06c6d3ed0ae	action relations. basic design concepts for behaviour modelling and refinement	design model;distributed system;abstraction hierarchy;concept design;limit set;causal relation;design methodology	This thesis presents basic design concepts, design methods and a basic design language for distributed system behaviours. This language is based on two basic concepts: the action concept and the causality relation concept. Our methods focus on behaviour refinement, which consists of replacing an abstract behaviour by a more concrete behaviour, such that the concrete behaviour conforms to the abstract behaviour. An important idea underlying this thesis is that an effective design methodology should be based on a properly chosen and precisely defined set of basic design concepts. Properly chosen design concepts represent essential system conceptions (mental images) that are derived from the real world and allow a designer to conceive and structure the essential characteristics of a system. The set of basic design concepts and their combination rules is called a basic design model. We explain how a design methodology supported by design notations and automated tools depends on the basic design model. We introduce and motivate a limited set of basic design concepts that are necessary to design distributed systems. These concepts are structured into two related conceptual domains: the entity domain and the behaviour domain. This thesis focuses on the behaviour domain, which consists of the action concept, the interaction concept and the concept of causality relation. Therefore, we elaborate the action and interaction concepts in more detail and give a formal definition of these concepts. The elaboration of the causality relation concept comprises the main part of this thesis. In order to enable a systematic and modular development of the causality relation concept, we identify the important characteristics of relations between actions and structure these characteristics in an abstraction hierarchy.	refinement (computing)	Dick A. C. Quartel	1998			limit set;design methods;computer science;artificial intelligence;concept art;algorithm	Robotics	-42.12622440818922	22.863338773295446	175233
e823f5ad1ecf1c5d5d1f01b7ebafe5764451d456	declarative models for business processes and ui generation using ocl	business process	This paper presents an approach to model business processes and associated user interfaces in a declarative way, relying on constraints. An UML-based meta-model to define processes, activities and user-interface objects is proposed. Connecting activities and user interface objects in an integrated model allows expressing interdependencies and mutual effects. Flexible execution logic for workflows and UI control flows are specified by OCL invariants. The model is constructed for the UML tool USE. Using object snapshots, USE can animate and validate business scenarios. Snapshots represent states of a process and a UI at specific times. Such animation enables business process and UI designers to discuss sensible scenarios on basis of the flexible declarative models. The intention is to create validated concrete process models in connection with UI elements that will provide a basis for the system implementation.	business process;declarative programming;eclipse modeling framework;interdependence;metamodeling;object constraint language;process modeling;prototype;uml tool;unified modeling language;user interface	Jens Brüning;Andreas Wolff	2009	ECEASST	10.14279/tuj.eceasst.24.333	simulation;computer science;artifact-centric business process model;database;business process;business process modeling	HCI	-47.48233427265154	23.825576094740917	175379
6606c52e246b672da3f0e6a4ec9d249f0e4adf27	domain modeling for development process simulation		Simulating agile processes prior to adoption can reduce the risk of enacting an ill-fitting process. Agent-based simulation is well-suited to capture the individual decision-making valued in agile. Yet, agileâs lightweight nature creates simulation difficulties as agents must fill-in gaps within the specified process. Deliberative agents can do this given a suitable planning domain model. However, no such model, nor guidance for creating one, currently exists.  In this work, we propose a means for constructing an agile planning domain model suitable for agent-based simulation. As such, the domain model must ensure that all activity sequences derived from the model are executable by a software agent. We prescribe iterative elaboration and decomposition of an existing process to generate successive internally-complete and -consistent domain models, thereby ensuring plans derived from the model are valid. We then demonstrate how to generate a domain model and exemplify its use in planning the actions of a single agent.	agent-based model;agent-based social simulation;agile software development;domain model;domain-specific modeling;executable;exemplification;image scaling;iterative method;multi-agent system;software agent;test-driven development	Ian J. De Silva;Sanjai Rayadurgam;Mats Per Erik Heimdahl	2017		10.1145/3084100.3084111	domain analysis;agile unified process;domain model;software agent;domain engineering;elaboration;domain (software engineering);business domain;systems engineering;engineering	AI	-43.23089204636006	22.30885703486797	176082
2221bb3505baa4c91fd9266fd3f1daabe9707e88	a genetic programming approach to support the design of service compositions	genetic program;service composition	Service-oriented architectures are rapidly gaining presence and popularity in the development of distributed software systems. Their rapid diffusion is changing the software engineering landscape and is opening the way to implement the idea of “software as a service” [19], i.e. something that one uses to compose a workflow that achieves a business goal, and then disengages. A service-oriented system can be thought of a set of services that collaborate in some way to carry on a given task. Also, service-oriented system can be, on its own, a service, usually referred as a composite service or composed service. A conceptual model for service-oriented systems [18] defines it as: “A Composed Service is a particular kind of Service, developed by a Service Integrator, which makes use of other Services”. From this definition emerges how the Service Integrator has a key role while dealing with service compositions. In fact, to have the right prospective of the existing problems, it is desirable to make a clear distinction between different services users i.e.:	distributed computing;prospective search;service-oriented architecture;service-oriented device architecture;service-oriented modeling;service-oriented software engineering;software as a service;software system	Lerina Aversano;Massimiliano Di Penta;Kunal Taneja	2005	Comput. Syst. Sci. Eng.		systems engineering	Web+IR	-47.45308232913264	19.65043190078539	176327
49c5ce122798c07271225f3e9661ec973d7c316a	specifying agents with uml in robotic soccer	multiagent system;robotic soccer;statecharts;specification;unified modeling language uml;robocup;levels of abstraction;unified modeling language;robot soccer;multiagent planning;multiagent systems	The use of agents and multiagent systems is widespread in computer science nowadays. Thus the need for methods to specify agents in a clear and simple manner arises.In this paper we propose an approach to specifying agent behaviors with the help of UML statecharts. Agents are specified on different levels of abstraction. In addition a method for specifying multiagent plans with explicit cooperation is shown. As an example domain we chose robotic soccer, which lays the basis of the annual RoboCup competitions.	agent-based model;computer science;multi-agent system;principle of abstraction;robot;unified modeling language	Jan Murray	2002		10.1145/544741.544756	unified modeling language;real-time computing;simulation;computer science;artificial intelligence;applications of uml;multi-agent system;specification	AI	-43.46480996408734	22.09686390998785	178812
e82e9f1e630b459598dcc490515de6b5415a75ad	formalising dynamic protocols for open agent systems	action language;argumentation;multi agent system;normative agents;norm deliberation;resource sharing;agent systems;deductive coherence	Multi-agent systems where the members are developed by parties with competing interests, and where there is no access to a member's internal state, are often classified as 'open'. The specification of open agent systems of this sort is largely seen as a design-time activity. Moreover, there is no support for run-time specification modification. Due to environmental, social, or other conditions, however, it is often required to revise the specification during the system execution. To address this requirement, we present an infrastructure for 'dynamic' specifications, that is, specifications that may be modified at run-time by the agents. The infrastructure consists of well-defined procedures for proposing a modification of the 'rules of the game' as well as decision-making over and enactment of proposed modifications. We employ the action language C+ to formalise dynamic specifications, and the 'Causal Calculator' implementation of C+ to execute the specifications. We illustrate our infrastructure by presenting a dynamic specification of a resource-sharing protocol.	action language;actor-based concurrent language;causal filter;multi-agent system;run time (program lifecycle phase);subroutine	Alexander Artikis	2009		10.1145/1568234.1568243	shared resource;action language;computer science;knowledge management;artificial intelligence;multi-agent system;database;distributed computing	SE	-42.08981318705247	19.560771745715495	181189
1f0f11572ed0b74b2e3d54da2670c82dc678553e	designing tailorable groupware for the healthcare domain	groupware;telemedicina;building block;telemedicine;information foraging;telemedecine;design guideline;selection combining;utilisabilite;theorie information;usabilidad;usability;theoretical foundation;collecticiel;information theory;social theory;teoria informacion	In this paper we present a theory-based approach to designing tailorable groupware for the healthcare domain. Both literature and empirical data show the need, and difficulty, of designing groupware that is adaptable to match the dynamic requirements of real-life co-operation in telemedicine. We apply an existing social theory, the Information Foraging Theory, to explain natural tailoring behaviour and state the implications for groupware design. To improve the usability of tailoring, we integrate this theoretical foundation with a groupware design approach to compose groupware behaviour out of individual building blocks and apply this to the healthcare domain. The results are a conceptual architecture and design guidelines that help groupware developers create tailorable groupware. An important contribution of our research is the concept of task-oriented groupware patches that help co-operating healthcare professionals in selecting, combining and fine-tuning those groupware services that fit their evolving needs and requirements.	assisted model building with energy refinement (amber);coherence (physics);collaborative software;component-based software engineering;computer-supported cooperative work;domain-specific language;information foraging;interaction;modeling language;real life;requirement;usability	Robert Slagter;Margit Biemans	2003		10.1007/978-3-540-39850-9_5	usability;human–computer interaction;information theory;computer science;knowledge management;computer-supported cooperative work;social theory;statistics	HCI	-46.23431265829809	22.798564209049168	181237
7ac9a3666505bf83882ec642d8b54539fcd99113	a simulation framework for socially enhanced applications		The emergence of complex computational problems, which cannot be solved solely by software and require human contribution, have brought the need of designing systems that efficiently manage a mix of software-based and human-based computational resources. Simulations are very appropriate for research on these systems, because they enable testing different scenarios, while avoiding the cost and time limitations of research in real systems. In this paper, we present a framework that enables the simulation of socially-enhanced applications utilizing both software and human based resources. Our framework addresses challenges in human-software environments, such as identifying relevant comparable metrics for mixed resources, mixed-resource selection, composition and scheduling algorithms, performance monitoring and analysis etc. We show the framework’s usefulness and usability through a use case.	algorithm;centralized computing;computation;computational problem;computational resource;computer simulation;emergence;requirement;scheduling (computing);usability	Mirela Riveni;Hong Linh Truong;Schahram Dustdar	2012		10.1007/978-3-642-33618-8_73	simulation;systems engineering;engineering;management science	HPC	-41.08984311694921	22.486963778759424	182355
7f422a871a1a01842a3c123f61715e148accad4a	pobsam: policy-based managing of actors in self-adaptive systems	formal model;actor models;labeled transition system;operational semantics;computer and information science;adaptive systems;algebra;policy based management;adaptive system;datavetenskap datalogi;computer science;policy based computing;data och informationsvetenskap;component based design	In this paper, we present a formal model, named PobSAM (Policy-based Self-Adaptive Model), for modeling self-adaptive systems. In this model, policies are used as a mechanism to direct and adapt the behavior of self-adaptive systems. A PobSAM model consists of a set of self-managed modules(SMM). An SMM is a collection of autonomous managers and managed actors. Managed actors are dedicated to functional behavior while autonomous managers govern the behavior of managed actors by enforcing suitable policies. To adapt SMM behavior in response to changes, policies governing an SMM are adjusted, i.e., dynamic policies are used to govern and adapt system behavior. We employ the combination of an algebraic formalism and an actor-based model to specify this model formally. Managers are modeled as meta-actors whose policies are described using an algebra. Managed actors are expressed by an actor model. Furthermore, we provide an operational semantics for PobSAM described using labeled transition systems.	actor model;adaptive system;autonomous robot;formal language;formal methods;mathematical model;operational semantics;organizing (structure);self-organization;semantics (computer science)	Narges Khakpour;Saeed Jalili;Carolyn L. Talcott;Marjan Sirjani;Mohammad Reza Mousavi	2010	Electr. Notes Theor. Comput. Sci.	10.1016/j.entcs.2010.05.008	simulation;computer science;knowledge management;component-based software engineering;adaptive system;management science;programming language;operational semantics	SE	-42.572519802702246	20.360938964021262	183055
261cbbc5af0fbeab1613f1228f6f2228a540d5fa	de2m: a solution for analyzing supply chain	distributed object management;manufacturing data processing;middleware;ontologies (artificial intelligence);supply chains;corba;de2m;devs formalism;hla;scor model;component-based simulation;middleware software;ontology;supply chain	Nowadays, the incremental use of component-based simulation presents a new challenge to overcome. So, the researchers and software developers are putting attention to solve problems as interoperability and reuse of components. In the supply chain context, this simulation paradigm is very valuable because allows us to develop independent models and then interconnect them using middleware software such as HLA, CORBA among other. However, the interoperability of these simulation components is a mayor problem to overcome. In this paper, we present an environment to analyze supply chain using this paradigm. We propose to use the SCOR model as roles that the component can play in conjunction with an Ontology base on SCOR. The modules are developed using DEVS formalism and HLA as middleware.	common object request broker architecture;component-based software engineering;devs;interoperability;middleware;programming paradigm;semantics (computer science);simulation;software developer	María de los Milagros Gutiérrez;Horacio P. Leone	2008	2008 Winter Simulation Conference			SE	-44.175907081624274	23.32205760343957	183347
7e8e48d898cbeb547a4c259a2e33accb259f385b	a bdi architecture for goal deliberation	bdi agents;goal setting;goal deliberation;agent programming	One aspect of rational behavior is that agents can pursue multiple goals in parallel. Current BDI theory and systems do not provide a theoretical or architectural framework for deciding how goals interact and how an agent can decide which goals to pursue. Instead, they assume for simplicity reasons that agents always pursue consistent goal sets. By omitting this important aspect of rationality, the problem of goal deliberation is shifted from the architecture to the agent programming level and needs to be handled by the agent developer in an error-prone ad-hoc manner. This paper argues that goal deliberation mechanisms can hardly be built directly into the fixed BDI interpreter cycle, because goal deliberation typically needs to be done irregularly at any point in time. Therefore, an enhanced BDI interpreter architecture is proposed that is specifically designed for extensibility. This extensibility can be exploited for the integration of arbitrary goal deliberation strategies.	cognitive dimensions of notations;enterprise architecture framework;extensibility;hoc (programming language);rationality	Alexander Pokahr;Lars Braubach;Winfried Lamersdorf	2005		10.1145/1082473.1082740	knowledge management;artificial intelligence	AI	-42.84650600077145	21.41359465828817	183406
469b67b1d494a02408b0f45a6c99b5c10ee4287e	ameli: an agent-based middleware for electronic institutions	interface agents;embodied conversational agents;agent interaction;middleware humans permission multiagent systems open systems software agents chaos computer architecture consumer electronics shape;design and development;agent based;chaos;information interface and presentation;consumer electronics;software agents;computer architecture;qualitative study;shape;permission;evaluation methodology;middleware;humans;wizard of oz technique;open multi agent systems;open systems;empirical evaluation;user interfaces;electronic institution;multiagent systems	The design and development of open multi-agent systems (MAS) is a key aspect in agent research. We advocate that they can be realised as electronic institutions. In this paper we focus on the execution of electronic institutions by introducing AMELI, an infrastructure that mediates agentsý interactions while enforcing institutional rules. An innovative feature of AMELI is that it is of general purpose (it can interpret any institution specification), and therefore it can be regarded as domain-independent. The combination of ISLANDER [5] and AMELI provides full support for the design and development of electronic institutions.	agent-based model;intelligent agent;interaction;middleware;multi-agent system	Marc Esteva;Bruno Rosell;Juan A. Rodríguez-Aguilar;Josep Lluís Arcos	2004	Proceedings of the Third International Joint Conference on Autonomous Agents and Multiagent Systems, 2004. AAMAS 2004.	10.1109/AAMAS.2004.56	simulation;wizard of oz experiment;human–computer interaction;shape;computer science;qualitative research;artificial intelligence;software agent;multi-agent system;middleware;open system;user interface;world wide web	Robotics	-42.69261098405288	18.926251708573997	183971
6239f8fbb3c3c4eaab3b25270e02521acd4c4cb1	from composites to service systems: the role of emergence in service design	compositional hierarchy;formal specification;behavioral discontinuity;web services cognition formal specification object oriented programming service oriented architecture;semantics;object oriented programming;visualization;cognition;web services;visualization organizations semantics context context modeling tires wheels;design patterns;tires;requirement engineering service design man made artifact system approach reality modeling nondeducible causality formal specification cognitive approach visual semantics service oriented view service composition;organizations;service oriented architecture;context modeling;design patterns compositional hierarchy behavioral discontinuity;context;wheels	Service Design is an engineering endeavor to enrich some aspect of the real world through a man-made artifact. Systems approach to modeling reality is particularly relevant to Service Design as it seeks to explain reality as a composition of functional observations. Nevertheless, its adoption varies from casual interpretations of interconnectedness to citations of non-deducible causality. To establish Systems approach firmly within the domain of Service Design, it is important to provide an unambiguous characterization of the nature of composition that a Systemic view entails. Further, such characterization should be amenable to the development of a formal framework for specifying Services. In this paper, we take a cognitive approach to composition and highlight the difference between composites as structure-unifying integrated-wholes and composites as emergence-revealing systems. We then translate this characterization into a set of visual semantics for expressing a service-oriented view of observed reality.	causality;emergence;interconnectedness;service-oriented device architecture	Anshuman B. Saxena;Alain Wegmann	2012	2012 IEEE International Conference on Systems, Man, and Cybernetics (SMC)	10.1109/ICSMC.2012.6378277	web service;software design pattern;simulation;cognition;visualization;computer science;organization;knowledge management;artificial intelligence;service-oriented architecture;formal specification;semantics;context model;object-oriented programming	Visualization	-48.00172495030215	20.273374308007085	184054
3558874214f623117c8d32f8f7ad0e9c4d8da592	towards verifying compliance in agent-based web service compositions	agent based;web service composition;service model;model checking;specification and verification;state space;web services;compliance;epistemic logic	We explore the problem of specification and verification of compliance in agent based Web service compositions. We use the formalism of temporal-epistemic logic suitably extended to deal with compliance/violations of contracts. We illustrate these concepts using a motivating example where the behaviours of participating agents are governed by contracts. The composition is specified in OWL-S and mapped to our chosen formalism. Finally we use an existing symbolic model checker to verify the example specification whose state space is approximately 2 and discuss experimental results.	agent-based model;epistemic modal logic;model checking;owl-s;semantics (computer science);state space;verification and validation;web service	Alessio Lomuscio;Hongyang Qu;Monika Solanki	2008		10.1145/1402383.1402424	web service;model checking;epistemic modal logic;computer science;state space;service-oriented modeling;ws-policy;database;computer security	AI	-44.948989723754416	18.446763744988438	184305
7048f3da3d0968d5173e164f6f7bd881366d6b1d	from multi-agent programming to object oriented design patterns		Various agent-based programming languages and frameworks have been proposed to support the development of multi-agent systems. They have contributed to the identification and operationalisation of multi-agent system concepts, features and abstractions by proposing spe- cific programming constructs. Unfortunately, these contributions have not yet been widely adopted by industry. In this paper, we follow the argument that multi-agent programming technology can find its way to industry by introducing design patterns for the existing agent constructs in standard software technology. We provide some object-oriented design patterns based on the programming constructs that have been developed in agent-based programming languages.		Mehdi Dastani;Bas Testerink	2014		10.1007/978-3-319-14484-9_11	fourth-generation programming language;constraint programming;software design pattern;declarative programming;programming domain;reactive programming;functional reactive programming;computer science;systems engineering;artificial intelligence;extensible programming;third-generation programming language;functional logic programming;programming paradigm;procedural programming;symbolic programming;inductive programming;fifth-generation programming language;programming language theory;programming language;second-generation programming language;comparison of multi-paradigm programming languages;concurrent object-oriented programming;programming in the large and programming in the small	HCI	-43.172549837815346	23.454568161954835	184564
c5d6e5087db51a9ddda73def0fc5d6e569af7878	rpsl meets lightning: a model-based approach to design space exploration of robot perception systems	verification;rpsl;alloy;falloy;domain specific language;validation;analysis;design space exploration;robot systems	The design space of a robotic application defines at a meta level what are all of its possible implementations. Those possibilities are called design alternatives and differ on many different aspects, one being preferred to the other depending on how, where, when or what the application should do. Design Space Exploration (DSE) is the process of reviewing those design alternatives, prior to their implementation, with intention to verify that the set of all design alternatives to be implemented covers all the possible scenarios in which the application is to be executed. In this paper we address two challenges related to DSE, namely, (1) the formal definitions of design spaces, a non-trivial task due to the many dimensions to be taken into consideration, and (2) the automatisation of DSE, that is, enabling a domain expert to review design alternatives corresponding to a given design space effortlessly. In this paper, we address those challenges in the context of robot perception software systems by combining two already existing technologies, namely RPSL for the specification of robot perception system's design spaces and Lightning, a language workbench that we use to formalise RPSL and obtain, from RPSL specifications, corresponding design alternatives.	architectural pattern;design space exploration;formal language;language workbench;lightning;model-driven engineering;robot;routing policy specification language;software deployment;software system;spatial variability;subject-matter expert	Loïc Gammaitoni;Nico Hochgeschwender	2016	2016 IEEE International Conference on Simulation, Modeling, and Programming for Autonomous Robots (SIMPAR)	10.1109/SIMPAR.2016.7862378	verification;simulation;computer science;domain-specific language;artificial intelligence;analysis;programming language	Robotics	-45.86820765986115	24.80427351761195	184740
a58681dd0c45055eeac6aea893bda2ce770dcc6c	modeling and consistency checking based on category for web navigation behavior	navigation web pages mathematics security mathematical model protocols logic functions algebra computational modeling computer simulation;graph theory;linear sketch;web navigation;web pages;formal model;category;probability density function;software systems;program verification;satisfiability;data mining;formal method;navigation;category theory;internet;consistency checking category linear sketch formal method web navigation;web services;consistency checking;mathematical model;security;web services graph theory internet program verification security of data;security of data;software system web navigation behavior consistency checking formal method	Using formal method is an effective methodology for modeling and verifying software system. Category theory provides a kind of common language, tool, thinking method and study means for other mathematics subjects, in which a sketch as a formal structure is a specification based on graphs. This paper gives a linear sketch for the Web navigation behavior, and constructs a formal model based on the category theory, which satisfies the given requirements and the specification described by the sketch, and proposes a method of the model consistency checking by constructing the free category, and discusses the security of the navigation model. Some rules of the link-security and return-security together with the corresponding approach to security checking are given as well as.	category theory;formal language;formal methods;graph (discrete mathematics);recursion;requirement;service composability principle;service-oriented architecture;software system;verification and validation;web navigation;web service;world wide web	Xin-lin Zhang;Huai-kou Miao;Hong-wei Zeng	2009	2009 International Conference on Computer Modeling and Simulation	10.1109/ICCMS.2009.82	web service;navigation;probability density function;the internet;category;computer science;graph theory;theoretical computer science;web navigation;web page;mathematical model;data mining;database;statistics;software system;category theory;satisfiability	SE	-46.64451256854669	20.69770073411284	185132
be50153e859949d1525855ba6d327669e2069a42	towards model-based design support for distributed user interfaces	interaction resources;ui distribution;hci;high level ui description;ui migration	User Interface design has been evolving for years to keep pace with different emerging technologies that effect human-computer interaction. Formal techniques for command-line interfaces, Drag-and-drop User Interface creation for Graphical User Interfaces and Model-Based Interface Design for Multi-Device User Interfaces are a few examples of this evolution. Nowadays communication channels between devices are getting faster, more reliable and will be omnipresent in a matter of time. Human interaction will no longer be about interaction with one device, but involves interacting with a network of devices cooperating as a set of <i>interaction resources.</i> Based on well-known concepts from distributed systems and model-based User Interface Design we develop a model for <i>distributed user interfaces.</i> One missing piece is support for distributed interfaces in the models used during the design of user interfaces. We will discuss how Dygimes, a testbed for model-based user interface development, provides support for distributed user interfaces. User mobility is a key issue, since mostly ubiquitous environments will benefit of distributed User Interfaces. In every respect location transparency plays an important role for human-device and device-device interaction.	command-line interface;distributed computing;graphical user interface;high- and low-level;human–computer interaction;testbed;user interface design;web service	Chris Vandervelpen;Karin Coninx	2004		10.1145/1028014.1028023	user interface design;user;user experience design;simulation;user modeling;interactive systems engineering;human–computer interaction;natural language user interface;computer science;event-driven programming;post-wimp;natural user interface;interactivity;user interface;world wide web	HCI	-48.231068600270525	21.562125397629355	185311
f324c52865f03d58b9ec89923ad9f11fd56fe951	domain driven simulation modeling for software design	domain specific modeling;software design simulation;design patterns;devs;software design;simulation model;astronomical observatory	System-theoretic modeling and simulation frameworks such as Object-Oriented Discrete-event System Specification (OO-DEVS) are commonly used for simulating complex systems, but they do not account for domain knowledge. In contrast, Model-Driven Design environments like Rhapsody support capturing domain-specific software design, but offer limited support for simulation. In this paper we describe the use of domain knowledge in empowering simulation environments to support domain-specific modeling. We show how software design pattern abstractions extend the domain-neutral simulation modeling. We applied Composite, Façade, and Observer patterns to an astronomical observatory (AO) command and control system and developed domain-specific simulation models for the system using DEVSJAVA, a realization of OODEVS. This approach is exemplified with simulation models developed based on an actual AO system.	ambient occlusion;apple rhapsody;complex systems;control system;devs;domain-specific modeling;model-driven architecture;model-driven engineering;model-driven integration;programming paradigm;real-time clock;simulation;software design pattern;software development;theory	Andrew E. Ferayorni;Hessam S. Sarjoughian	2007		10.1145/1357910.1357958	domain analysis;software design pattern;real-time computing;simulation;simulation software;computer science;systems engineering;software design;devs;domain engineering;simulation modeling;algorithm	Robotics	-45.76685023372695	25.03704578354462	185708
5091516a99c6042b016dab32bd7b30a1a6f40e4d	automatic gui generation in web based information systems		In typical software applications, users access application data using GUI widgets. There is an important, but little explored, link between visualization and security: when the application data is protected by an access-control policy, the application GUI should be aware of and respect this policy. For example, a widget should not give users options to execute actions on the application data that they are not authorized to execute. However, GUI designers are not (and usually should not be) aware of the application data security policy. To solve this problem, we define in this paper a many-models-to-model transformation that, given a security-aware data model and a GUI model, makes the GUI model also security-aware.	authorization;correctness (computer science);data model;data security;eclipse modeling framework;graphical user interface builder;information system;metamodeling;model transformation;model-driven architecture;model-driven security;operational transformation;qvt;software development;software widget	Nicola Aloia;Cesare Concordia;Maria Teresa Paratore	2003			web development;web modeling;web standards;information retrieval;web service;web mapping;human–computer interaction;usability;web design;web navigation;computer science	Security	-47.59533281139511	22.75598936710527	185991
afd11de6e9087af499e2174232bc4faeae30933c	rope: role oriented programming environment for multiagent systems	agent role interaction;protocols;multiagent system;transformable system;programming environments;explicit documentation;federated system;runtime environment rope role oriented programming environment multiagent systems agent based cooperative applications cooperation processes coordination explicit documentation transformable system federated system heterogeneous system agent role interaction;knowledge engineering multi agent systems programming environments;programming environment;runtime environment;cooperation processes;companies;multi agent framework;strategic planning;cost accounting;multi agent systems;programming environments multiagent systems strategic planning production protocols documentation cost accounting concrete runtime environment companies;role oriented programming environment;cooperation architecture;heterogeneous system;production;rope;organizational structure;documentation;concrete;multiagent systems;coordination;agent based cooperative applications;design methodology;knowledge engineering	This paper introduces a programming environment and architecture for the development of agent based cooperative applications using a role based approach. We focus on the cooperative aspects by introducing cooperation processes (CP) as a concept of its own. CPs describe all and only the coordination and cooperation parts of an application. The explicit documentation of the coordination and cooperation mechanisms used in a MAS allows their evaluation and reuse. We are able to change existing and introduce new cooperation processes at runtime without modifying the existing agents. We specify the cooperative behaviour of an agent in a separate role description. The interconnection of these roles constitutes the CP. Describing cooperation independent from concrete agents allows to build heterogeneous, federative and transformable MAS. We show how agents decide what roles to accept and how the agent-role interaction works. Finally we present the ROPE framework and runtime environment.	agent-based model;documentation;integrated development environment;interconnection;multi-agent system;run time (program lifecycle phase);runtime system	Michael Becht;Thorsten Riemke-Gurzki;Jürgen Klarmann;Matthias Muscholl	1999		10.1109/COOPIS.1999.792181	organizational structure;simulation;concrete;rope;documentation;computer science;knowledge management;artificial intelligence;multi-agent system;distributed computing;cost accounting	AI	-42.087379329519614	20.08566270358928	186014
d738ec8071ba20db4a4d06e5ff83d0004d0a6c43	web service composition: from analysis to autonomy	service composition;software systems;web service;web service composition;model checking	The talk addresses the benefits, costs and research issues involved in taking a rigorous approach to the engineering of web services. In the first part of the talk, we present a way of developing web services in which model checking is used to verify that service compositions are verified against formally specified design goals. In the second part of the talk, we outline an approach to using formally specified goals in developing autonomous or self-managed compositions. The presentation will include some short demonstrations of the tools we are using. The talk is based on work in London Software Systems a grouping that includes academics at Imperial College London (the speaker, Jeff Kramer, Howard Foster and Sebastian Uchitel) and at University College London (Wolfgang Emmerich, Anthony Finkelstein and David Rosenblum).	autonomy;web service	Jeff Magee	2007		10.1007/978-3-540-78663-4_2	web service;model checking;web modeling;computer science;programming language;world wide web;computer security;software system	HCI	-44.37676089108551	21.545443686653936	186111
d57c76e5e2e6585b2afe043e96dd1e191c39546e	toward an acceptable definition of service [service-oriented architecture]	developpement logiciel;web service description language;rational unified process;formal specification extreme programming rational unified process xml web service standards service oriented architecture;formal specification;tool support;service orientation;xml language;service web;web service;extreme programming;service;programacion extrema;formal specification xml internet standardisation software standards;standardisation;web services invocation framework;software architecture;internet;desarrollo logicial;software development;architecture orientee service;xml;programmation extreme;explosions web services service oriented architecture standardization standards organizations sun computer architecture business java computer interfaces;software standards;service web services description language service oriented architecture web services invocation framework methodology;methodology;service oriented architecture;web services description language;langage xml;lenguaje xml;architecture logiciel;servicio web	The methodologies such as extreme programming and the Rational Unified Process claim that they work with service-oriented architecture, but neither was designed with SOA in mind. Both predominately focuses on a project's delivery, not on the system's initial conceptualization. For service definition to succeed, there must be tooled support for the automatic flow of information among architects, designers, developers, maintainers, and, most importantly, the client. XML and Web service standards are helping architects improve the definition of service and provide a consistent framework for realizing service-oriented architecture's promises.	conceptualization (information science);extreme programming;rational unified process;service-oriented architecture;service-oriented device architecture;web service;xml	Sara A. Jones	2005	IEEE Software	10.1109/MS.2005.80	xml;computer science;software engineering;database;programming language;world wide web	SE	-47.69894462827974	19.06625178020962	186713
4f14a4616d1568904b3303eb574f4b6244134fdf	separation of concerns for mechatronic multi-agent systems through dynamic communities	multi agent system;separation of concern;complex structure;rapid prototyping;emergent behavior;social structure;formal analysis;mechatronic systems	Multi-agent systems present a promising paradigm for coping with the complexity of intelligent mechatronic applications, particularly where purposeful behavior and complex structures emerge from the interactions of seemingly simple elements. The safety of mechatronic systems relies on predictability, which is apparently at odds with the concept of emergent behavior. When designing complex mechatronic multi-agent systems, the main challenge thus lies in achieving predictability without ruling out the desired emergent behavior. We propose to achieve this by decomposing the requirements and design into largely independent concerns, represented by social structures with behavioral norms, which are reconciled at the agent level. An explicit grounding of all constructs in observable entities from the mechatronic system’s environment model makes them amenable to formal analysis and enables rapid prototyping.	computer-aided software engineering;domain model;emergence;entity;experiment;interaction;mechatronics;multi-agent system;norm (social);observable;operational semantics;programming paradigm;rapid prototyping;requirement;separation of concerns;simulation;social structure	Florian Stallmann;Holger Giese	2004		10.1007/978-3-540-31846-0_16	simulation;separation of concerns;computer science;systems engineering;engineering;knowledge management;social structure;multi-agent system;generalized complex structure;emergence	AI	-42.84860299195644	21.50923554293994	187638
6ab2f60d94b41e41b21db58b60887c850a3a7722	formal specification of substitutability property for fault-tolerance in reactive autonomic systems	formal specification;fault tolerant;autonomic system	Multi-Agent Systems (MAS) have been widely proposed and applied to various application domains, where traditional approaches are impractical, such as space exploration missions. MAS can offer greater redundancy, efficiency, and scalability; however, they also raise new challenges, such as complex and often unexpected emergent group behavior, which require a formal specification as well as verification. Therefore, we have proposed a formal approach, named Reactive Autonomic Systems Framework (RASF), based on category theory to tackle those challenges. In this paper, we focus on the formal specification of substitutability property for the fault-tolerance and illustrate our approach through a Mars-world case study implemented as MAS using JADEX.	application domain;autonomic computing;category theory;data transfer object;emergence;fault tolerance;formal language;formal specification;interaction;metamodeling;modeling language;multi-agent system;recursion;redundancy (engineering);requirement;scalability;self-management (computer science);systems modeling	Heng Kuang;Jamal Bentahar;Olga Ormandjieva;Nassir Shafieidizaji;Stan Klasa	2010		10.3233/978-1-60750-629-4-357	reliability engineering;fault tolerance;real-time computing;formal methods;formal verification;computer science;systems engineering;software engineering;formal specification;programming language	SE	-42.586523775963954	22.01209939819898	188704
1df87d8df6aa5138ea4b9b4d1dd631f63019b0c1	multi-platform document-oriented guis	gui customization;platform independent guis;alm	In recent years, increasing complexity of graphical user interfaces (GUIs) of applications has led to problems in GUI management, since there is no single layout to fulfill every user’s needs. GUI editors have been developed to enhance end-user options but they commonly fail to preserve personalized GUIs. This paper presents an extension to the GUI editor built into the Auckland Layout Model (ALM) that can permanently store user-defined GUI layouts and reproduce them on different platforms. A novel technique called the document-oriented approach has been exploited to empower end-user customization, which allows GUI layouts to be dynamically edited, saved using a standardized XML-based GUI description language, and loaded in a platform-independent manner.	c++;graphical user interface;haiku;java;layout manager;microsoft windows;personalization;xml	James Kim;Christof Lutteroth	2009			simulation;human–computer interaction;operating system;application lifecycle management;world wide web	HCI	-47.411965717673816	22.393007460344062	188715
109c51d32dcb8e0239ba50a97c35e552ebd13b52	an autonomous layered normative system framework	norm;system reliability;multiagent system;normative system;layered normative system;layered normative system multiagent system norm;natural languages;multi agent systems;natural languages multi agent systems;natural language;semantic gap;multiagent system autonomous layered normative system framework natural language operational language semantic entailment relation automatic interlevel norm translation action operation mapping;natural languages costs multiagent systems computer science concrete reliability virtual environment humans formal languages;dynamic adaptation	One of the main problems of normative system implementation is the semantic gap between the abstract norms described by natural language and the concrete norms described by operational language. This paper introduced an autonomous layered normative system framework which divided the normative system into three different layers. In this framework we realized automatic norm refinement by setting up semantic entailment relation and behavior responsibility relation, and automatic inter-level norm translation with action-operation mapping in the formal norm layers. With these mechanisms, the model effectively increased the system autonomy, with reduced normative system development cost and increased system reliability and dynamic adaptability.	agent-based model;autonomous robot;autonomy;machine translation;multi-agent system;natural language;refinement (computing);system dynamics	Bin Hu;Ji Gao;Guoyong Cai	2009	2009 WRI World Congress on Computer Science and Information Engineering	10.1109/CSIE.2009.170	natural language processing;computer science;artificial intelligence;multi-agent system;natural language	AI	-42.620315438598155	20.502194728484636	188755
b23fd11b73b6d0e2f163cf80a003d88da68ec3c9	on aspectj and composition filters: a mapping of concepts	aspectj;separation of concern;mapping of concepts;aspect oriented programming;composition filters;weaving;separation of concerns;java language	ASPECTJ and composition filters are well-known influential approaches among a wide range of aspect-oriented programming languages that have appeared in the last decade. Although the two approaches are relatively mature and many research works have been devoted to their enhancementand use in practical applications, so far, there has been no attempt that aims at comparing deeply the two approaches. This article is a step towards this comparison; it proposes a mapping between ASPECTJ and Composition filters that put to the test the two approaches by confronting and relating their concepts. Our work shows that the mapping is neither straightforward nor oneto-one despite the fact that the two approaches belong to the same category and provide extension of the same Java language.	aspect-oriented programming;aspectj;coexist (image);composition filters;java;metamodeling;one-to-one (data model);programming language;programming paradigm;software system	Djamel Meslati	2009	Informatica, Lith. Acad. Sci.		aspect-oriented programming;separation of concerns;computer science;programming language;algorithm	PL	-43.40657854331265	23.91003558156474	189340
9d0f6b514172c1c5eb5bb8e5cfadf9228f1cc4e1	an engineering method for context-aware and reactive systems	context awareness;intelligent transport domain;electronic mail;formal specification;information systems;intelligent transport domain context aware system reactive systems engineering method information system mobile technologies communication technologies high technological risks development process ubiquitous requirements identification ubiquitous requirements modeling is engineering process model transformations model refinement model generation event driven logic dynamicity reactivity passenger assistant application;context context modeling adaptation models business unified modeling language electronic mail informatics;model generation;high technological risks;automated highways;ubiquitous requirement context awareness context reactivity engineering process event flow;context aware system;development process;model refinement;event flow;context reactivity;communication technologies;model transformations;is engineering process;passenger assistant application;ubiquitous requirements modeling;ubiquitous requirements identification;business;unified modeling language;dynamicity;informatics;reactive systems;information system;engineering method;mobile computing;adaptation models;ubiquitous requirement;reactivity;event driven logic;context modeling;mobile computing automated highways formal specification information systems;engineering process;context;mobile technologies	Ubiquity in Information Systems (ISs) is a new requirement widely expressed by customers and users due to emerging and evolving communication and mobile technologies. The design of IS dealing with high technological risks requires a precise and appropriate development process which is lacking today. This paper tries to contribute to solving this problem by proposing a process for identifying and modeling ubiquitous requirements that is integrated into an existent IS engineering process. The process is model driven based on a set of model transformations intended to help model refinement and specific platform models generation. This approach is original by the use of an event driven logic as dynamicity and reactivity constitute major required properties from ubiquitous applications. The method is used to create a passenger assistant application in the intelligent transport domain.	access control;context awareness;coupling (computer programming);database;information system;iteration;metamodeling;refinement (computing);requirement;usability	Ansem Ben Cheikh;Stéphane Coulondre;Agnès Front;Jean-Pierre Giraudin	2012	2012 Sixth International Conference on Research Challenges in Information Science (RCIS)	10.1109/RCIS.2012.6240433	real-time computing;simulation;computer science;systems engineering;operating system;data mining;database;mobile computing;world wide web;information system	SE	-46.20484752198144	21.236735195085064	189468
261fd8c107f07c2d0a3a80280451b6b00a6168e8	an initial agent behaviour modelling and definition methodology as applied to unmanned aerial vehicle simulations	agent based systems;unmanned aerial vehicle;simulation;multi agent systems;behaviour modelling;agent behaviour;uavs;agent based modelling;unmanned aerial vehicles	In some agent-based modelling systems, it is difficult for domain-expert users to define and implement agent behaviours without possessing extensive programming knowledge. This research developed a process through which non-programmer, domain experts can effectively interact with a modelling environment to define, develop and implement agent-based behaviours. This paper presents a new methodology for the definition and implementation of UAV agent behaviours based on diagramming an agent’s controller state and using diagram syntax to generate the executable algorithm. No programming knowledge is required to reuse modular behaviours and trigger. After describing the methodology, a sample scenario is presented as a proof-of-concept.	aerial photography;agent-based model;algorithm;diagram;executable;programmer;simulation;subject-matter expert;unmanned aerial vehicle	William E. Marsh;Raymond R. Hill	2008	IJSPM	10.1504/IJSPM.2008.022073	control engineering;simulation;computer science;systems engineering;engineering;multi-agent system	AI	-42.88932456418044	22.479069127970114	189925
1c588a16c84c214edeba5ed0788470eba17baa84	model-based user interface development for adaptive self-service systems		Self-service systems are complex technical systems and provide products and services for the end user. Due to heterogeneity of the users of such systems the usability of the user interfaces is of great importance. The user interfaces have to be adapted or adapt itself to the various skills and preferences of the users. Due to the monolithic system architecture of existing self-service systems, a simple and flexible usage of the user interface is often restricted. The development of adaptive user interfaces involves challenges for developers that are addressed partially by frameworks like the CAMELEON Reference Framework (CRF). However, no concrete approaches to support the development of flexible and adaptive user interfaces for distributed self-service systems exist in industry. In this paper we describe an integrated model-based approach for the development of adaptive user interfaces.	user interface	Enes Yigitbas;Holger Fischer;Stefan Sauer	2014		10.1007/978-3-319-07668-3_21	user interface design;user;user modeling;natural user interface;user interface	Robotics	-48.233628396811255	21.038233740069934	191146
dd97e50fedf54ebce9b9d5a4154ba5505e25778c	ontology-based engineering of autonomous systems	chemical reactors;analytical models;software;control systems;chemical reactor control system;autonomous system domain;application software;mobile robot;systems engineering;systems engineering ontologies artificial intelligence systems analysis;biological system modeling;mobile robots;runtime;ontologies artificial intelligence;systems engineering and theory;autonomous systems product line engineering;autonomic system;control system;mobile robot based application;systems analysis;unified modeling language;intelligent systems;product line engineering;process control;autonomous system domain autonomous systems ontologies ontology based engineering;system testing;intelligent autonomous systems;ontologies;work in progress;domain ontology;autonomous systems;ontologies systems engineering and theory system testing biological system modeling laboratories intelligent systems runtime mobile robots application software control systems;chemical reactor control system ontology based engineering autonomous systems product line engineering intelligent autonomous systems mobile robot based application;ontology based engineering	This paper describes a work in progress on an ontology-based approach for autonomous system engineering. This is part of the ASys research programme which focuses on the development of a technology for autonomous systems product-line engineering. Such technology will comprehend from platform technology to designs of intelligent autonomous systems and support methodologies. Within this programme, a domain-ontology for autonomous systems (OASys) has been developed to describe the autonomous system's domain. OASys will be used as core software asset for the analysis, design, implementation, and run-time operation of any autonomous system. Two testbeds are being developed to test OASys's applicability: a mobile robot-based application, and the control system of a chemical reactor.	artificial intelligence;autonomous robot;autonomous system (internet);control system;mobile robot;ontology (information science);reactor (software);run time (program lifecycle phase);systems engineering;testbed	Julita Bermejo-Alonso;Ricardo Sanz;Manuel Rodríguez;Carlos Hernández	2010	2010 Sixth International Conference on Autonomic and Autonomous Systems	10.1109/ICAS.2010.15	mobile robot;computer science;control system;artificial intelligence	Robotics	-41.61273991429108	22.970863045046716	192072
561112cfa8c33cf7ffe6e7b80dc6eb6bddccccfb	post-mortem analysis of emergent behavior in complex simulation models	emergence;simulation;emergent behavior;reconstructability analysis	Analyzing and validating emergent behavior in component-based models is increasingly challenging as models grow in size and complexity. Despite increasing research interest, there is a lack of automated, formalized approaches to identify emergent behavior and its causes. As part of our integrated framework for understanding emergent behavior, we propose a post-mortem emergence analysis approach that identifies the causes of emergent behavior in terms of properties of the composed model and properties of the individual model components, and their interactions. In this paper, we detail the use of reconstructability analysis for post-mortem analysis of known emergent behavior. The two-step process first identifies model components that are most likely to have caused emergent behavior, and then analyzes their interaction. Our case study using small and large examples demonstrates the applicability of our approach.	component-based software engineering;emergence;interaction;simulation	Claudia Szabo;Yong Meng Teo	2013		10.1145/2486092.2486123	simulation;computer science;artificial intelligence;management science	AI	-43.704007878185706	21.940702993521583	193124
ac31b983804262c256fdceeb885dc538c4431855	agora ucs ubiquitous collaborative space	architectural design;theoretical model;internal control;distributed learning;side effect	Agora UCS is a new architecture designed for distributed learning as a side effect of communication and collaboration. This architecture aims to achieve (i) ubiquity (time and space independent access by community members); (ii) immanence (full internal control of the destiny of the community) and (iii) multi-modal communication (reinforcing the interactions between the members of the community). The theoretical model underlying Agora UCS is inspired by an integration of agents and Grid concepts (AGIL). Agora UCS has been experimented by a dozen of communities, which represent alltogether about seventy members. We achieved quite promising results in terms of motivation and collective performances.	agora (programming language);interaction;modal logic;performance;theory	Pascal Dugenie;Stefano A. Cerri;Philippe Lemoisson;Abdelkader Gouaich	2008		10.1007/978-3-540-69132-7_81	simulation;computer science;internal control;side effect	HCI	-41.283482745737764	19.935044013266047	193732
104c40d6de4a6a23e832296304fc1459f98c1ddb	using case-based reasoning in autonomic electronic institutions	case base reasoning;use case;electronic institution	Electronic institutions (EIs) define the rules of the game in agent societies by fixing what agents are permitted and forbidden to do and under what circumstances. Autonomic Electronic Institutions (AEIs) adapt their regulations to comply with their goals despite coping with varying populations of self-interested external agents. This paper presents a self-adaptation model based on Case-Based Reasoning (CBR) that allows an AEI to yield a dynamical answer to changing circum-	automatic equipment identification;autonomic computing;case-based reasoning;population	Eva Bou;Maite López-Sánchez;Juan A. Rodríguez-Aguilar	2007		10.1007/978-3-540-79003-7_10	engineering;knowledge management;operations management;management science	AI	-43.30809406764287	20.640829627141724	194157
b43fbf00a1d30222049e94556bc7a0951b2d4685	mapping abstractions of norms in electronic institutions	groupware;electronic commerce;multi agent system;agent modeling;social order;conferences collaborative work international collaboration;multi agent systems;social behavior;electronic institution;norms norm mapping abstractions electronic institutions electronic commerce applications multi agent systems coordination strategy cooperation strategy;social norm;groupware multi agent systems electronic commerce	Electronic institutions are the agents’ counterpart of human organizations, which are specifically designed for providing support, trust, and legitimacy in electronic commerce applications. Two approaches have been advocated for the design and modeling of multi agent systems in an environment that is governed by some kind of (social) norms: in coordination strategy, multi agent systems are defined as a set of entities regulated by mechanisms of social order and created by more or less autonomous actors to achieve common goals; in cooperation strategy, agents model specific roles in the society and interact with each other as means to accomplish their goals. In this paper, we argue that there is a relative similarity between the two approaches with respect to their use of norms as constraints on the social behavior of multi agents systems.	autonomous robot;categorization;e-commerce;electronic markets;entity;multi-agent system;vagueness	Ismail Khalil;Gabriele Anderst-Kotsis;Wieland Schwinger	2003		10.1109/ENABL.2003.1231378	social order;social behavior;computer science;knowledge management;artificial intelligence;multi-agent system;management science;norm	AI	-42.669732368670296	18.92211416397465	194271
69508769d3df1196035955a7e516d9f30d1d7fc2	a novel approach for enacting the distributed business workflows using bpel4ws on the multi-agent platform	agent platform;electronic commerce;formal specification;system requirement bpel4ws specification distributed multiagent workflow enactment mechanism multiagent protocol lightweight coordination calculus web service composition;multi agent system;agent based;component based systems;bpel4ws specification;distributed multiagent workflow enactment mechanism;web services protocols multiagent systems engines calculus informatics control systems logic message passing production;web service composition;business process model;multi agent systems;internet;specification languages;multiagent protocol;lightweight coordination calculus;workflow management software;interaction protocol;software requirements and specifications;workflow management software electronic commerce formal specification internet multi agent systems specification languages;validation and verification;system requirement	This paper describes the development of a distributed multi-agent workflow enactment mechanism using BPEL4WS specification. It demonstrates that a multi-agent protocol (lightweight coordination calculus (LCC)) can be used to interpret a BPEL4WS specification to enable distributed business workflow using Web services composition. The key difference between our system and other existing multi-agent based Web services composition systems is that with our approach, a business process model (system requirement) can be adopted directly in the multi-agent system, thus reduce the effort on the validation and verification of interaction protocol (system specification). This approach also provides us with a lightweight way of re-design of large components based system	agent-based model;business process execution language;interaction protocol;multi-agent system;process modeling;system requirements;verification and validation;web service	Li Guo;David Stuart Robertson;Yun-Heh Chen-Burger	2005	IEEE International Conference on e-Business Engineering (ICEBE'05)	10.1109/ICEBE.2005.13	verification and validation;the internet;system requirements;computer science;artificial intelligence;multi-agent system;formal specification;database;distributed computing;business process modeling	SE	-44.69766911825753	18.37104812437052	194361
3c47bb70d224d05ff056d13e0f2474e61fbffa6c	reactive component based service-oriented design - a case study	service-oriented design;large class;robust server-side application;rapid development;j2ee constraint;case study;j2ee application;serious challenge;legacy system;j2ee platform;reactive component;software systems;e commerce;formal language;component model;electronic commerce;java;software engineering;object oriented programming;software development	Service-oriented design (SOD) is a software development paradigm that utilizes services as fundamental elements for developing applications/solutions. Recently, service orientation is becoming a mainstream approach for building large scale software systems. However, current software models do not take services as fundamental elements and it is very difficult for people to model from services. We consider that contract equipped reactive component model is well suited for addressing various aspects of service oriented systems including service description, delegation, as well as composition. To demonstrate this idea, a case study: e-commerce application is presented in this paper. We start from analyzing the service that the customers need, then assign the service to the interface, which in turn, delegates the service to the component. A Java-like formal language rCOS is used to describe the models. In our model, interface is used to capture the syntax information and contract is applied to capture the semantics information of the service. Component is obtained by refining the contract to designs	component-based software engineering;e-commerce;formal language;java;programming paradigm;rcos (computer sciences);service-orientation;service-oriented architecture;service-oriented software engineering;software development;software system	Jing Liu;Jifeng He	2006	11th IEEE International Conference on Engineering of Complex Computer Systems (ICECCS'06)	10.1109/ICECCS.2006.70	e-commerce;formal language;service product management;differentiated service;computer science;systems engineering;service delivery framework;software development;operating system;software engineering;service design;software as a service;component object model;programming language;object-oriented programming;java;software system	SE	-47.2012010346795	19.189462313897828	194532
a405a30589c021b728f9f390af2b2657363d7b8c	a generic agent organisation framework for autonomic systems	dynamic change;social interaction;service provider;generic algorithm;technology;computer science software engineering;autonomic system;conference paper;science technology;autonomic systems;organisational structure;computer science;computer science information systems;large scale distributed systems;modelling and simulation;organisation;computer science theory methods;autonomic computing;organisation model;problem solving	Autonomic computing is being advocated as a tool for managing large, complex computing systems. Specifically, self-organisation provides a suitable approach for developing such autonomic systems by incorporating self-management and adaptation properties into largescale distributed systems. To aid in this development, this paper details a generic problem-solving agent organisation framework that can act as a modelling and simulation platform for autonomic systems. Our framework describes a set of service-providing agents accomplishing tasks through social interactions in dynamically changing organisations. We particularly focus on the organisational structure as it can be used as the basis for the design, development and evaluation of generic algorithms for self-organisation and other approaches towards autonomic systems.	algorithm;autonomic computing;autonomous robot;coefficient;computation;distributed computing;domain-specific language;interaction;performance evaluation;problem solving;self-management (computer science);self-organization;simulation	Ramachandra Kota;Nicholas Gibbins;Nicholas R. Jennings	2009		10.1007/978-3-642-11482-3_14	service provider;simulation;computer science;knowledge management;artificial intelligence;management;autonomic computing;technology	AI	-41.51975727683455	19.932404515693644	196305
5ef847d590279298b92d18eb476c2543d4405b01	self-organisation for survival in complex computer architectures	fault tolerant;computer architecture;global information systems;complex system;immune system;swarm robotics	This chapter steps back from specific self-organisational architectural solutions to consider what self-organisation means in the context of complex systems. Drawing on insights in complexity and selforganisation, the chapter explores how the natural propensity of complex systems (such as the mammalian immune system) to self-organise could be exploited as a mechanism for adaptation in complex computer architectures. Drawing on experience of immune-inspired fault-tolerant swarm robotics, the chapter speculates on how complex systems such as global information systems could adopt self-organised survivability.	algorithm;complex system;complex systems;complexity;computer architecture;enterprise information system;fault tolerance;global information system;homeostasis;interaction;reflection coefficient;robot;self-organization;service-oriented architecture;service-oriented device architecture;simulation;swarm robotics;systems design;while	Fiona A. C. Polack	2009		10.1007/978-3-642-14412-7_4	swarm robotics;complex systems;fault tolerance;computer architecture;simulation;global information system;immune system;computer science;artificial intelligence;computer engineering	HCI	-44.975258979665966	20.9835179092445	196543
127708c488142f3676844ccf009629b17e5083d7	mas oriented patterns	multiagent system;agent communication;object oriented	Multiagent systems (MAS) are spreading, in the academic world as well as in industry. Nevertheless, MAS design is still a problem. The agent community now has some experience. So, we considered existing techniques allowing formalisation and reuse of the experience. We particularly considered object-oriented techniques, for they are close to the MAS paradigm, for they are widely used to implement MAS, and for they are strongly integrated in the computer science world. So we develop – through an example – the idea of using patterns to describe the usage of existing models and techniques in MAS domain.	computer science;formal system;multi-agent system;pattern language;programming paradigm;software agent	Sylvain Sauvage	2001		10.1007/3-540-45941-3_30	simulation;systems engineering;engineering;knowledge management	AI	-42.8494014746613	22.275446678892642	196661
018732f25f6e0ef6091e9e0b136ad4f9d007d7bb	simulation and analysis of business processes using golog	theoretical framework;formal method;frame problem;process model;logic programs;process analysis;formal analysis;simulation tool;business process reengineering;situation calculus;business process	This paper describes a novel approach to simulating and analyzing business processes using GOLOG, a high-level logic programming language suitable for defining complex behaviors and capable of simulating action execution. The language is based on an extended version of the situation calculus and incorporates a formal theory of action. Business processes can be viewed as actions (physical or perceptual) that affect the state of affairs or an agent's knowledge of this state. Using GOLOG, business processes can be specified, synthesized and tested for feasibility and consistency. The theoretical framework behind GOLOG includes a solution to the frame problem for perceptual and complex actions, as well as, a formal method for process analysis. The latter uses a solution to the ramification problem for proving the satisfaction or violation of constraints. In case this is not possible, the method proposes strengthenings to the processes' pre- and post-conditions, so that any implementation that meets the process specification, provably guarantees that constraints will not be violated. In this manner, business process reengineering can be assisted by a formal analysis and simulation tool for testing the consistency of the process model.	action theory (philosophy);business process;code refactoring;formal methods;frame problem;high- and low-level;process modeling;process specification;programming language;ramification problem;simulation;situation calculus	Dimitris Plexousakis	1995		10.1145/224019.224052	computer science;systems engineering;knowledge management;artifact-centric business process model;business process management;process modeling;management science;business process model and notation;business process;business process discovery;business rule;business process modeling	AI	-44.76717114045501	24.233627744496204	198164
dfcbfb46d7c761026786885cc448ece05ac57445	optimal system's complexity, an architecture perspective	modularity;complex networks	Systems Complexity is driven by more connectivity among constituents and increased environmental uncertainties. Modularity is a system’s mechanism to manage complexity in the presence of environmental heterogeneities. Here, a general design decision framework for modularity and fractionation in complex systems is presented. This framework incorporates spatial and temporal heterogeneity of the environment, adaptability of the system and costs associated with modularity. It is argued that as the space-time heterogeneity of the environment increases, higher levels of modularity are needed. To determine the optimal level of complexity in a modular design, a four-level modularity pyramid is introduced. This pyramid takes into account functional and physical dimensions of modularity and allows for resource sharing to enables dynamic modularity. Moving up from each level is quantified by an M+ operation that calculates the net value of increased modularity for each sub-system.	complex systems;decision support system;modular design	Babak Heydari;Kia Dalili	2012		10.1016/j.procs.2012.09.030	computer science;modularity;distributed computing	AI	-44.88453470246445	21.03636174285216	198333
39e2ae7b8696f3a16eafdfd3a94307112bb6f1a2	plugin driven architecture for intelligent management of building	building automation;sensors and actuators;middleware;model driven architecture	Abstract. In the present work an innovative solution based on a middleware framework is introduced which simplifies the modeling of a software for intelligent management of buildings and allows a multistandard and multiprotocol integration of sensors and actuators. The adopted programming methodology has never been used in the implementation of a BA system and makes it possible to overcome some limitations of traditional approaches, such as the hard integration of new interfaces and protocols. The results of the framework application in a residential building proves the validity of the proposed solution.	as-interface;business architecture;middleware;plug-in (computing);software development process	Alessandro Olivi;Roberto Borsini;Alessandro Bastari	2010		10.1007/978-3-642-16917-5_26	embedded system;simulation;building automation;computer science;operating system;middleware	Robotics	-44.52535309598818	23.090313694933442	198821
3cc545c5b8c56801491db5158b3f8e7e31f05279	lwoad: a specification language to enable the end-user develoment of coordinative functionalities	computational mechanics;context aware;design and development;specification;specification language;develoment;coordinative;end;user;language;functionalities;enable;lwoad	In this paper, we present an observational case study at a major teaching hospital, which both inspired and gave us valuable feedback on the design and development of LWOAD. LWOAD is a denotational language we propose to support users of an electronic document system in declaratively expressing, specifying and implementing computational mechanisms that fulfill coordinative requirements. Our focus addresses (a) the user-friendly and formal expression of local coordinative practices; (b) the agile mocking-up of corresponding functionalities; (c) the full deployment of coordination-oriented and context-aware behaviors into legacy electronic document systems. We give examples of LWOAD mechanisms taken from the case study and discuss their impact for the EUD of coordinative functionalities.	specification language	Federico Cabitza;Carla Simone	2009		10.1007/978-3-642-00427-8_9	end;user;real-time computing;simulation;specification language;computer science;computational mechanics;theoretical computer science;operating system;database;language;enabling;programming language;specification	NLP	-45.75811720603262	24.086854681398503	198973
