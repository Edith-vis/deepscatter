id	title	keywords	abstract	entities	authors	year	journal	doi	fos	area	x	y	ix
0149c114ab3293752fa4e6e20a22fb78cddb0772	support for extensibility and site autonomy in the legion grid system object model	tratamiento paralelo;tolerancia falta;computers;virtual machine;data sharing;base donnee repartie;distributed database;shared memory;fault tolerant;traitement parallele;red larga distancia;memoria compartida;resource manager;resource management;distributed computing;base repartida dato;reseau longue distance;object oriented programming;grid;gestion recursos;large scale;software architecture;distributed objects;rejilla;scheduling;fault tolerance;data access;site autonomy;grille;gestion ressources;calculo repartido;middleware;legion system;ordonamiento;wide area;autonomie site;software tools;grids;distributed data processing;security;grid computing;calcul reparti;tolerance faute;parallel processing;ordonnancement;wide area network;grid system;architecture logiciel;wide area networks;memoire partagee;object model	Grid computing is the use of large collections of heterogeneous, distributed resources (including machines, databases, devices, and users) to support largescale computations and wide-area data access. The Legion system is an implementation of a software architecture for grid computing. The basic philosophy underlying this architecture is the presentation of all grid resources as components of a single, seamless, virtual machine. Legion’s architecture was designed to address the challenges of using and managing wide-area resources. Features of the architecture include: global, shared namespaces; support for heterogeneity; security; wide-area data sharing; wide-area parallel processing; application-adjustable fault-tolerance; efficient scheduling and comprehensive resource management. We present the core design of the Legion architecture, with focus on the critical issues of extensibility and site autonomy. Grid systems software must be extensible because no static set of system-level decisions can meet all of the diverse, often conflicting, requirements of present and future user communities, nor take best advantage of unanticipated future hardware advances. Grid systems software must also support complete site autonomy, as resource owners will not turn control of their resources over to a	arbitrary code execution;autonomy;computation;cray t90;dec alpha;data access;database;extensibility;fault tolerance;grid computing;ibm tivoli workload scheduler;lsf;legion (software);linux;metaclass;parallel computing;personal computer;queueing theory;requirement;scheduling (computing);seamless3d;software architecture;supercomputer;virtual machine;windows nt;workstation	Michael J. Lewis;Adam Ferrari;Marty Humphrey;John F. Karpovich;Mark M. Morgan;Anand Natrajan;Anh Nguyen-Tuong;Glenn S. Wasson;Andrew S. Grimshaw	2003	J. Parallel Distrib. Comput.	10.1016/S0743-7315(03)00012-1	fault tolerance;parallel computing;real-time computing;computer science;resource management;operating system;database;distributed computing;programming language;grid computing	HPC	-28.21221904461334	44.75655637910858	187540
a041e3af137897eaa837064217ff74ea509d1e23	multisafe - a modular multiprocessing approach to secure database management	distributed data;securite;multiprocessing;abstract data types;intermodule communication;abstract data type;database management;data storage;back end database;technical report departmental;data base management system;historical collection till dec 2001;safety;multitraitement;data abstraction;access control;systeme gestion base donnee;secure database;modular architecture	This paper describes the configuration and intermodule communication of a MULTImodule system for supporting Secure Authorization with Full Enforcement (MULTISAFE) for database management. A modular architecture is described which provides secure, controlled access to shared data in a multiuser environment, with low performance penalties, even for complex protection policies. The primary mechanisms are structured and verifiable. The entire approach is immediately extendible to distributed protection of distributed data. The system includes a user and applications module (UAM), a data storage and retrieval module (SRM), and a protection and security module (PSM). The control of intermodule communication is based on a data abstraction approach, initially described in terms of function invocations. An implementation within a formal message system is then described. The discussion of function invocations begins with the single terminal case and extends to the multiterminal case. Some physical implementation aspects are also discussed, and some examples of message sequences are given.	abstraction (software engineering);authorization;computer data storage;extensibility;formal verification;modular programming;multi-user;multiprocessing;multiseat configuration	Robert P. Trueblood;H. Rex Hartson;Johannes J. Martin	1983	ACM Trans. Database Syst.	10.1145/319989.319993	computer science;database;distributed computing;programming language;abstract data type;computer security	DB	-26.953181527412305	45.272443825037286	187806
6282772a5bf794d469debeb0eeb7f9358c44ddbb	cev: collaborative environment for visualization using java rmi		Collaborative visualization is an active area of research in computer science. Many di erent techniques and implementations have been proposed. However, most of today's systems require many high-end graphics workstations. By implementing a new technique that separates the 2D and 3D components of the visualization process, we have developed a system called CEV that operates using only one high-end workstation along with many inexpensive machines that need only the capability of running a web browser. Using Java RMI, CEV provides a heterogeneous environment for many users that is easy-to-use. This paper describes the operation, methodology, and implementation of CEV.	computer science;constant elasticity of variance model;java remote method invocation;workstation	Rajeev R. Raje;Michael Boyles;Shiaofen Fang	1998	Concurrency - Practice and Experience	10.1002/(SICI)1096-9128(199809/11)10:11/13%3C1079::AID-CPE397%3E3.0.CO;2-5	human–computer interaction;computer science;programming language;complex data type;computer graphics (images)	Visualization	-30.482473904966973	40.370154946053574	188437
da92e7e4b9c24bde65cfb904ae01e42668c86e91	providing interoperability for java-oriented monitoring tools with jinext	lenguaje programacion;virtual machine;machine language;lenguaje maquina;programming language;tool support;java programming;interoperabilite;interoperabilidad;surveillance;java virtual machine;specification;distributed computing;complejidad programa;langage java;machine virtuelle;vigilancia;monitoring;especificacion;algorithme reparti;langage programmation;calculo repartido;lenguaje java;algoritmo repartido;multiple monitors;monitorage;interoperability;program complexity;monitoreo;maquina virtual;distributed algorithm;on line monitoring;langage machine;calcul reparti;complexite programme;java language	While Java is getting an increasingly widely used programming language, Java Virtual Machine has become an important platform for networking and distributed computing. Due to the increasing complexity of programs, the demand for monitoring tool support (debuggers, performance analyzers etc.) for efficient computing is growing as well. A special, open interface J-OMIS, which provides an efficient support for monitoring distributed Java programs, is derived from the On-line Monitoring Interface Specification (OMIS) that enables to use multiple monitoring tools simultaneously. OMIS has been developed with interoperability in mind but not all structural and logical conflicts have been solved. Addressing the missing aspects of interoperability support within J-OMIS is intended to increase the simplicity of developing the monitoring tools which will synergetically support each other. In the paper we present the concept of JINEXT, an extension to OMIS, which is aimed to provide interoperability between monitoring tools.	interoperability;java	Wlodzimierz Funika;Arkadiusz Janik	2005		10.1007/11428848_20	embedded system;interoperability;distributed algorithm;real-time computing;machine code;computer science;virtual machine;operating system;database;distributed computing;programming language;specification	HPC	-28.54233190684416	42.00501562027933	189205
706e86778fce1148c4af2f793c96ac3ea61be7bc	thirty years of server technology — from transaction processing to web services	sensibilidad contexto;distributed system;programa paralelo;naming;tratamiento transaccion;transaction management;base donnee;driving force;systeme reparti;context aware;gestion transaccion;enterprise javabeans;red www;client server architecture;architecture client serveur;structure programme;componente logicial;programming environment;componente ejb;application server;reseau web;database;service web;menu;base dato;composant logiciel;web service;database management;remote procedure call;medio ambiente programacion;sistema repartido;appel procedure a distance;internet;estructura programa;contexto;denomination;context management;software component;conteneur;contexte;denominacion;arquitectura cliente servidor;multithread;world wide web;serveur fichier;multitâche;systeme gestion base donnee;sensibilite contexte;transaction processing;contenedor;composant ejb;program structure;sistema gestion base datos;database management system;remote procedure calls;parallel program;multitarea;context;file server;traitement transaction;environnement programmation;gestion transaction;servicio web;container;generic programming;programme parallele	Server technology started with transaction-processing systems in the sixties. Database Management Systems (DBMS) soon adopted mechanism like multi-process and multi-threading. In distributed systems, the remote procedure call also needed process structures at the server side. The same is true for file servers, object servers (CORBA), Web servers, application servers, EJB containers, and Web Services. All these systems support a request-response behavior, sometimes enhanced with a session concept. They are facing thousands of requests per second and must manage thousands of session contexts at the same time. While programming the applications that run on the servers and actually process the requests should be as simple as possible, efficiency must still be very high. So a general programming environment should be defined that is easy to use and, on the other hand, allows for the efficient execution of thousands of program instances in parallel. This contribution will identify mechanisms that have been developed in the context of transaction processing and database management. It will then generalize them to server processing of any kind. This includes program structures, context management, multi-tasking and multi-threading, process structures, program management, naming, and transactions. The driving force behind the discussion is to avoid the re-invention of the wheel that far too often occurs in computer science, mostly in ignorance of older and presumably outdated systems.	server (computing);transaction processing;web service	Klaus Meyer-Wegener	2005		10.1007/11499923_4	computer science;operating system;database;distributed computing;programming language;remote procedure call;world wide web;computer security;application server;client–server model;server;server farm	DB	-27.480979183048106	42.68978677800612	189224
a3b1b7149c07860fb8b74e163c8a88d7f77c8da4	models to solve the duplication problem in treaty systems	behaviour control;kernel access control memory management logic gates distributed computing computational modeling computer science;authorisation;duplication problem;distributed computing;distributed computing behaviour control access control duplication problem treaties;treaties;unauthorised behaviour duplication problem treaty systems scalable adaptive access control approach distributed environments dynamic populations capability approach enhancement action sequences behaviour characteristics treaty behaviour modeling;access control	Capabilities are a more scalable and adaptive access control approach compared with the conventional approaches such as ACLs, due to their being held and managed by users or agents in systems, but not the middleware. This feature makes capabilities more suitable in distributed environments that have dynamic populations. Treaties have been proposed to enhance the capability approach by introducing sequences of actions, such that treaties can capture characteristics of behaviours, and provide finer control over accesses. However there is a new problem brought by the behaviour modeling of treaties which is called duplication problem, which concerns preventing users from gaining unauthorised behaviour by duplicating treaties. In this paper we discuss this problem and propose three models of treaty systems that aim to solve the duplication problem.	access control;authorization;behavioral modeling;middleware;population;regular expression;scalability;semantics (computer science)	Yining Zhao;Alan Wood	2012	2012 13th International Conference on Parallel and Distributed Computing, Applications and Technologies	10.1109/PDCAT.2012.96	parallel computing;simulation;computer science;access control;machine learning;database;distributed computing;authorization;operations research;computer security;algorithm	HPC	-33.34309675023826	45.201828955117946	189523
61bf1686cb9224ae6b13b30ed91ad481b2dd1df1	virtual gateways in the decos integrated architecture	distributed application;encapsulation;virtual networks;coordinate application services;time triggered;spine;application software;open systems virtual private networks internetworking communication complexity resource allocation;resource allocation;resource duplication;integrable system;communication complexity;distributed computing;distributed computer system encapsulated virtual gateways decos integrated architecture distributed application subsystems overlay network time triggered backbone fault isolation complexity management application subsystems coordinate application services resource duplication virtual networks;application subsystems;indexing terms;decos integrated architecture;physics computing;computer networks;computer architecture;time triggered backbone;distributed computer system;redundancy;distributed computing system;distributed application subsystems;computer network management;encapsulated virtual gateways;computer architecture application software computer networks distributed computing physics computing spine computer network management communication system control redundancy encapsulation;internetworking;overlay network;timed automata;communication system control;complexity management;open systems;fault isolation;virtual private networks	The DECOS architecture divides the overall system into a set of nearly-independent distributed application subsystems, which share the node computers and the physical network of a single distributed computer system. Through restricting each application subsystem's communication activities to a corresponding encapsulated virtual network realized as an overlay network on a time-triggered backbone, the DECOS architecture supports fault isolation, complexity management, and the independent development of application subsystems. This paper provides a solution to the controlled export and import of information between distributed application subsystems. We give the designer the ability to coordinate application services and exploit redundancy in the system to either improve reliability or reduce resource duplication. We introduce virtual gateways for the coupling of virtual networks by the selective redirection of messages. Virtual gateways not only resolve property mismatches between distributed application subsystems, but also preserve encapsulation.	computer;distributed computing;encapsulation (networking);fault detection and isolation;internet backbone;overlay network	Roman Obermaisser;Philipp Peti;Hermann Kopetz	2005	19th IEEE International Parallel and Distributed Processing Symposium	10.1109/IPDPS.2005.450	integrable system;application software;parallel computing;real-time computing;overlay network;index term;spine;encapsulation;resource allocation;computer science;operating system;communication complexity;distributed computing;redundancy;open system;complexity management;fault detection and isolation;computer network	HPC	-26.707608554478746	45.405701947216535	189899
7ba31a82ddca6aca1e901ca0d957511e7111d647	whole-stack analysis and optimization of commercial workloads on server systems	workload;commerce electronique;optimisation;comercio electronico;red www;optimizacion;application server;reseau web;logicial personalizado;serveur reseau;intergiciel;large scale;network servers;java 2 platform enterprise edition j2ee;internet;ordinateur ibm;charge travail;ibm computers;whole stack analysis;world wide web;middleware;optimization;carga trabajo;serveur application websphere;electronic trade	The evolution of the Web as an enabling tool for e-business introduces a challenge to understanding the execution behavior of largescale middleware systems, such as J2EE [2], and their commercial workloads. This paper presents a brief description of the whole-stack analysis and optimization system – being developed at IBM Research – for commercial workloads on Websphere Application Server (WAS) [5] – IBM’s implementation of J2EE – running on IBM’s pSeries [4] and zSeries[3] server systems.	electronic business;ibm research;ibm websphere application server;java platform, enterprise edition;mathematical optimization;middleware;server (computing);world wide web	C. Richard Attanasio;Jong-Deok Choi;Niteesh Dubey;Kattamuri Ekanadham;Manish Gupta;Tatsushi Inagaki;Kazuaki Ishizaki;Joefon Jann;Robert D. Johnson;Toshio Nakatani;Il Park;Pratap Pattnaik;Mauricio J. Serrano;Stephen E. Smith;Ian M. Steiner;Yefim Shuf	2004		10.1007/978-3-540-30141-7_5	ibm high availability cluster multiprocessing;embedded system;queued telecommunications access method;parallel computing;the internet;computer science;operating system;middleware;database;distributed computing;application server	OS	-27.676970033953737	43.28304278817949	190821
8a4034e315b652ba3036007423603f094f00de6f	design of a linda kernal using causal multicast	fault tolerant;distributed server;linda;causal multicast;type of service;operating system;load balance	Load balancing across a network of independent computers is an inherently difficult task: even when implemented, issues • of granulari ty can render a sys tem ineffective. This paper presents a d is t r ibuted Linda system, implemented using the Isis d is t r ibuted toolkit . The Isis tools are used to provide, in a simple fashion, pr imit ive load balancing at the thread level. The Isis toolkit provides a set of ordered mult icast protocols, and a number of tools to suppor t replication and fault tolerance. Recent work on the Isis system has focused on integrat ing the basic services into a microkernel operat ing system, such as Much or Chorus. The Linda server discussed in this paper is an example of a system which must manage a shared resource, a common task for system server applications. In this paper the advantages of using a system such as Isis are clearly, demonst ra ted . This indicates that the inclusion of this type of service in a microkernel opera t ing system should prove highly useful in system programming tasks.	causal filter;chorusos;computer;fault tolerance;isis;kernal;linda (coordination language);load balancing (computing);microkernel;multicast;server (computing);system programming;type of service	Kim Shearer	1994		10.1145/326619.326908	fault tolerance;real-time computing;computer science;load balancing;operating system;type of service;distributed computing;computer network	OS	-27.11953845616255	45.40192480197831	190966
3c5d29cd02737a41dbb2b4676bab911c9dc6883c	resource monitoring and management in metacomputing environments	distributed system;systeme reparti;surveillance;resource management;logicial personalizado;distributed computing;partage ressource;intergiciel;grid;gestion recursos;vigilancia;sistema repartido;monitoring;heterogeneidad;rejilla;resource sharing;particion recursos;grille;gestion ressources;calculo repartido;middleware;service design;management tool;monitorage;monitoreo;grid computing;calcul reparti;heterogeneity;heterogeneite	Sharing of computational resources across multiple administrative domains (sometimes called grid computing) is rapidly gaining in popularity and adoption. Resource sharing middleware must deal with ownership issues, heterogeneity, and multiple types of resources that include compute cycles, data, and services. Design principles and software approaches for monitoring and management tools in such environments are the focus of this paper. A basic set of requirements for resource administration tools is first proposed. A specific tool, the GUI for the H2O metacomputing substrate is then described. Initial experiences are reported, and ongoing as well as future enhancements to the tool are discussed.	computational resource;graphical user interface;grid computing;metacomputing;middleware;requirement	Tomasz Wrzosek;Dawid Kurzyniec;Dominik Drzewiecki;Vaidy S. Sunderam	2003		10.1007/978-3-540-39924-7_84	shared resource;simulation;computer science;resource management;heterogeneity;service design;middleware;database;distributed computing;grid;computer security;grid computing	HPC	-28.312145337561347	43.36739335620667	191639
9f8028cd86d623036af09ecc932b74824e09d327	resource and service discovery in the igrid information service	estensibilidad;tolerancia falta;modelizacion;fault tolerant;service information;resource management;service web;web service;intergiciel publication souscription;service utilisateur;grid information service;grid;modelisation;dynamic information;gestion recursos;intergicial editor suscriptor;rejilla;fault tolerance;relational model;grille;servicio informacion;gestion ressources;advanced technology;modele donnee;extensibilite;scalability;information service;servicio usuario;information system;service discovery;user service;technologie avancee;modeling;publish subscribe middleware;tolerance faute;systeme information;tecnologia avanzada;servicio web;distributed architecture;data models;sistema informacion	In this paper we describe resource and service discovery mechanisms available in iGrid, a novel Grid Information Service based on the relational model. iGrid is developed within the GridLab project by the ISUFI Center for Advanced Computational Technologies (CACT) at the University of Lecce, Italy and it is deployed on the European GridLab testbed. The GridLab Information Service provides fast and secure access to both static and dynamic information through a GSI enabled web service. Besides publishing system information, iGrid also allow publication of user’s or service supplied information. The adoption of the relational model provides a flexible model for data, and the hierarchical distributed architecture provides scalability and fault tolerance.	distributed computing;fault tolerance;open-source software;primary source;relational model;scalability;service discovery;system information (windows);testbed;web service	Giovanni Aloisio;Massimo Cafaro;Italo Epicoco;Sandro Fiore;Daniele Lezzi;Maria Mirto;Silvia Mocavero	2005		10.1007/11424857_1	fault tolerance;computer science;resource management;database;world wide web;computer security	HPC	-28.59476817299024	43.5832523226005	193544
3ce656d5fe8eecca96e37505e148b3afd2c24209	study of long-distance real-time data transmission technology based on web	vc;web;real time data;c language;internet;long distance;ip networks;data handling;c s;programming;java;real time systems	This article introduces the principle of Remote based on web, It describes in details the key technology in socket programming to reaLize Remote control software which is described in the JAVA and VC++ language environment. The key technology and method are presented in the article.	computer network programming;java;real-time data;remote desktop software;world wide web	Licheng Ma;Shuzhong Lin	2011	2011 Second International Conference on Digital Manufacturing & Automation	10.1109/ICDMA.2011.278	real-time computing;computer science;database;real time java;world wide web	EDA	-31.9039778246887	41.746150384301664	194080
3b216196e7573b07f4cbfc81dc65f17b758dae27	achieving repeatability of asynchronous events in wireless sensor networks with envirolog	experimental tests;debugging;sensor systems and applications;networks;performance evaluation;wireless sensor networks testing discrete event simulation sensor systems and applications wireless application protocol debugging timing costs surveillance monitoring;surveillance;wireless application protocol;testing;sensor network;statistical evaluation;wireless sensor network;field tests;dynamic environment;system evaluation;monitoring;parameter tuning;systems analysis;debugging computers;software tools;source code;wireless sensor networks;discrete event simulation;timing	Sensing events from dynamic environments are normally asynchronous and non-repeatable. This lack of repeatability makes it particularly difficult to statistically evaluate the performance of sensor network applications. Hence, it is essential to have the capability to capture and replay sensing events, providing a basis not only for system evaluation, but also for realistic protocol comparison and parameter tuning. To achieve that, we design and implement EnviroLog, a distributed service that improves repeatability of experimental testing of sensor networks via asynchronous event recording and replay. To use EnviroLog, an application programmer needs only to specify two types of simple annotations to the source code. Automatically, the preprocessor embeds EnviroLog into any desired level of an event-driven architecture. It records all events generated by lower layers and can replay them later to upper layers on demand. We validate the accuracy and performance of recording and replay through a set of microbenchmarks, using the latest XSM platforms. We further demonstrate the strength of EnviroLog in system tuning and performance evaluation for sensor network applications in an outdoor environment with 37 XSMs.	debugging;event-driven architecture;event-driven programming;performance evaluation;performance tuning;preprocessor;programmer;repeatability;simulation;tinyos;user interface;velocity (software development)	Liqian Luo;Tian He;Gang Zhou;Lin Gu;Tarek F. Abdelzaher;John A. Stankovic	2006	Proceedings IEEE INFOCOM 2006. 25TH IEEE International Conference on Computer Communications	10.1109/INFOCOM.2006.114	embedded system;real-time computing;wireless sensor network;computer science;operating system;distributed computing;computer network	Mobile	-33.06146386578154	39.895422612310924	194185
5e083267fd7faca94f4a59ad7df23067fb0369ad	modern client-server dbms architectures	client server	In this paper, we describe three Client-Server DBMS architectures. We discuss their functional components and provide an overview of their performance characteristics.		Nick Roussopoulos;Alex Delis	1991	SIGMOD Record	10.1145/126482.126489	computer science;operating system;database;world wide web;client–server model	DB	-29.882218141740353	45.13038795973049	195131
52270e16051029943723b43244be7c3bf89c699a	towards virtual networks for virtual machine grid computing	virtual machine;virtual networks;effective connectivity;perforation;home network;operating system;levels of abstraction;grid computing	Virtual machines can greatly simplify wide-area distributed computing by lowering the level of abstraction to the benefit of both resource providers and users. Networking, however, can be a challenge because remote sites are loath to provide connectivity to any machine attached to the site network by outsiders. In response, we have developed a simple and efficient layer two virtual network tool that in effect connects the virtual machine to the home network of the user, making the connectivity problem identical to that faced by the user when connecting any new machine to his own network. We describe this tool and evaluate its performance in LAN and WAN environments. Next, we describe our plans to enhance it to become an adaptive virtual network that will dynamically modify its topology and routing rules in response to the offered traffic load of the virtual machines it supports and to the load of the underlying network. We formalize the adaptation problem induced by this scheme and take initial steps to solving it. The virtual network will also be able to use underlying resource reservation mechanisms on behalf of virtual machines. Both adaptation and reservation will work with existing, unmodified applications and operating systems.	david turner (computer scientist);distributed computing;grid computing;interaction;operating system;performance evaluation;routing;virtual machine	Ananth I. Sundararaj;Peter A. Dinda	2004			real-time computing;temporal isolation among virtual machines;computer science;virtual machine;kernel virtual address space;distributed computing;virtual circuit;world wide web;data diffusion machine;gbcast;virtual finite-state machine	HPC	-31.353149972498276	43.85612867034199	195547
958bd1323ffc63ed647c3ae43a916eb32d60fa3a	developing grid-aware applications with drmaa on globus-based grids	application development;parallelisme;scientific application;resource management;distributed computing;interface programme application;grid;gestion recursos;parallelism;paralelismo;rejilla;application program interfaces;algorithme reparti;grille;gestion ressources;calculo repartido;distributed resource management;algoritmo repartido;peritaje;expertise;distributed algorithm;calcul reparti	In spite of the great research effort made in Grid technology in the last years, application development and execution in the Grid continue requiring a high level of expertise due to its complex and dynamic nature. The Distributed Resource Management Application API (DRMAA) has been proposed to aid the rapid development and distribution of applications across the Grid. In this paper we present the first implementation of the DRMAA standard on a Globus-based testbed, and show its suitability to express typical scientific applications. The DRMAA routines have been implemented using the functionality provided by the GridW ay framework.	application programming interface;drmaa;high-level programming language;job scheduler;message passing interface;openmp;testbed	Jose Herrera;Eduardo Huedo;Rubén S. Montero;Ignacio Martín Llorente	2004		10.1007/978-3-540-27866-5_56	distributed algorithm;simulation;computer science;resource management;operating system;database;distributed computing;grid;rapid application development;operations research;drmaa	HPC	-27.744926753273862	43.28461236079263	195901
f2932a061d0eb391bac441040458be4d4563f893	evolution styles: multi-view/multi-level model for software architecture evolution			software architecture	Adel Hassan;Mourad Chabane Oussalah	2018	JSW		distributed computing;theoretical computer science;computer science;software architecture	SE	-32.01104339500945	45.70059000376557	196353
9805fbb821d0612222506e979ffcc17a6fa9dd05	4.2bsd and 4.3bsd as examples of the unix system	distributed system;sistema operativo;system reliability;design principle;systeme unix;fiabilite systeme;systeme reparti;memory management;user interface;performance;reseau ordinateur;time sharing;university of california;portability;process management;computer network;fiabilidad sistema;systeme conversationnel;algorithme;algorithm;algorritmo;sistema repartido;operating system;interactive system;file system;portabilite;sistema conversacional;red ordenador;systeme exploitation;rendimiento;data structure;portabilidad	This paper presents an in-depth examination of the 4.2 Berkeley Software Distribution, Virtual VAX-11 Version (4.2BSD), which is a version of the UNIX Time-Sharing System. There are notes throughout on 4.3BSD, the forthcoming system from the University of California at Berkeley. We trace the historical development of the UNIX system from its conception in 1969 until today, and describe the design principles that have guided this development. We then present the internal data structures and algorithms used by the kernel to support the user interface. In particular, we describe process management, memory management, the file system, the I/O system, and communications. These are treated in as much detail as the UNIX licenses will allow. We conclude with a brief description of the user interface and a set of bibliographic notes.	algorithm;bsd;data structure;input/output;memory management;software distribution;unix time;user interface;vax-11	John S. Quarterman;Abraham Silberschatz;James L. Peterson	1985	ACM Comput. Surv.	10.1145/6041.6043	unix signal;unix architecture;embedded system;command-line interface;simulation;data structure;performance;computer science;operating system;fstab;unix file types;unix filesystem;database;streams;shar;time of check to time of use;unix;user interface;time-sharing;tmpdir;memory management	OS	-26.764581410405867	39.60476841960337	197697
6fab2ce42abdad681af3be07dd392de2b385055c	integration of qos-enabled distributed object computing middleware for developing next-generation distributed application	asynchronous method invocation;corba;design patterns;middleware;distributed application	This paper describes the integration of QoS-enabled distributed object computing (DOC) middleware for developing next-generation distributed applications. QoS-enabled DOC middleware facilitates ease of development and deployment of applications that can leverage the underlying networking technology or end-system QoS architecture. This paper also describes the development of a demonstration application utilizing QoS-enabled middleware to control the dissemination of Unmanned Air Vehicle (UAV) data throughout a ship.	distributed computing;distributed object;middleware;quality of service;software deployment;unmanned aerial vehicle	Yamuna Krishnamurthy;Vishal Kachroo;David A. Karr;Craig Rodrigues;Joseph P. Loyall;Richard E. Schantz;Douglas C. Schmidt	2001		10.1145/384197.384228	embedded system;middleware;software design pattern;real-time computing;asynchronous method invocation;computer science;autonomous system;object request broker;common object request broker architecture;middleware;distributed computing;programming language;object-oriented programming;service quality;systems architecture	HPC	-33.05670934423697	45.3730529972145	197887
17d5ba86b68a31b668e015884eca60e5d21f9b52	simulation of fault-tolerant parallel systems design paradigms for extensible solutions	fault tolerant;parallel systems		simulation;systems design	Colin Campbell;Pierre M. Fiorini	2003			computer science;parallel computing;fault tolerance;distributed computing;extensibility	EDA	-29.003077112759048	46.11329629487598	198258
a5fb9094c6068a5dc2fbd0ca132151e02d05aadc	a distributed storage system for a video-on-demand server (research note)	tolerancia falta;distributed system;architecture systeme;systeme reparti;video a peticion;video a la demande;serveur informatique;stockage donnee;data storage;sistema repartido;fault tolerance;video on demand;servidor informatico;almacenamiento datos;arquitectura sistema;system architecture;tolerance faute;computer server	The aim of this paper is to present the design of a distributed storage system for a video server. The main goal is to support good fault-tolerance capabilities (no single point of failure, and no perturbation of the clients at the time the failure occurs) while supporting a high-number of video streams.		Alice Bonhomme;Loïc Prylli	2000		10.1007/3-540-44520-X_157	embedded system;fault tolerance;real-time computing;computer science;operating system;computer data storage;distributed computing;server;systems architecture	OS	-26.64799499886509	44.031578534289544	198696
3ce18de653d7f6494fac811363d2f17099c5af76	the impact of object technology on commercial transaction processing	application development;intercambio informacion;architecture systeme;langage c;implementation;gestion trafic;distributed transactions;interrogation base donnee;teleinformatica;interrogacion base datos;ingenieria logiciel;traffic management;satisfiability;software engineering;ejecucion;teleinformatique;c language;client server;monitoring;object oriented;echange information;execution environment;information exchange;object transaction service;object management group;genie logiciel;gestion trafico;oriente objet;workflow;arquitectura sistema;objects;process model;monitorage;transaction processing;system architecture;monitoreo;orientado objeto;remote data processing;database query;business process;lenguaje c	Businesses today are searching for information solutions that enable them to compete in the global marketplace. To minimize risk, these solutions must build on existing investments, permit the best technology to be applied to the problem, and be manageable. Object technology, with its promise of improved productivity and quality in application development, delivers these characteristics but, to date, its deployment in commercial business applications has been limited. One possible reason is the absence of the transaction paradigm, widely used in commercial environments and essential for reliable business applications. For object technology to be a serious contender in the construction of these solutions requires: – technology for transactional objects. In December 1994, the Object Management Group adopted a specification for an object transaction service (OTS). The OTS specifies mechanisms for defining and manipulating transactions. Though derived from the X/Open distributed transaction processing model, OTS contains additional enhancements specifically designed for the object environment. Similar technology from Microsoft appeared at the end of 1995. – methodologies for building new business systems from existing parts. Business process re-engineering is forcing businesses to improve their operations which bring products to market. Workflow computing, when used in conjunction with “object wrappers” provides tools to both define and track execution of business processes which leverage existing applications and infrastructure. – an execution environment which satisfies the requirements of the operational needs of the business. Transaction processing (TP) monitor technology, though widely accepted for mainframe transaction processing, has yet to enjoy similar success in the client/server marketplace. Instead the database vendors, with their extensive tool suites, dominate. As object brokers mature they will require many of the functions of today's TP monitors. Marrying these two technologies can produce a robust execution environment which offers a superior alternative for building and deploying client/server applications.	best practice;business process;client–server model;distributed computing;distributed transaction;inter-process communication;mainframe computer;programming paradigm;requirement;server (computing);software deployment;software development kit;teleprocessing monitor;transaction processing;x/open	Edward E. Cobb	1997	The VLDB Journal	10.1007/s007780050039	workflow;extreme transaction processing;active traffic management;real-time computing;information exchange;transaction processing;distributed transaction;computer science;microsoft transaction server;object;process modeling;database;online transaction processing;business process;programming language;object-oriented programming;implementation;rapid application development;computer security;transaction processing system;client–server model;systems architecture;satisfiability	DB	-30.946498783976708	43.581317425518364	199346
